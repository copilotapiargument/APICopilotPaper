[
    {"Preceding Code": "public static double multiply(double a, double b) { return a * b; } double m = 2.5, n = 4.0; double product = multiply(m, n);", "Arguments": "m, n"},
    {"Preceding Code": "public static int add(int x, int y) { return x + y; } int a = 5, b = 10; int sum = add(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String concatenate(String str1, String str2) { return str1 + str2; } String first = 'Hello', second = 'World'; String result = concatenate(first, second);", "Arguments": "first, second"},
    {"Preceding Code": "public static boolean isEven(int num) { return num % 2 == 0; } int number = 7; boolean even = isEven(number);", "Arguments": "number"},
    {"Preceding Code": "public static double divide(double a, double b) { return a / b; } double x = 10.0, y = 2.0; double quotient = divide(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static int subtract(int x, int y) { return x - y; } int a = 15, b = 5; int difference = subtract(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String repeat(String str, int times) { return str.repeat(times); } String text = 'Hi'; int count = 3; String repeated = repeat(text, count);", "Arguments": "text, count"},
    {"Preceding Code": "public static boolean isPositive(int num) { return num > 0; } int number = -3; boolean positive = isPositive(number);", "Arguments": "number"},
    {"Preceding Code": "public static double power(double base, double exponent) { return Math.pow(base, exponent); } double b = 2.0, e = 3.0; double result = power(b, e);", "Arguments": "b, e"},
    {"Preceding Code": "public static int max(int x, int y) { return Math.max(x, y); } int a = 12, b = 8; int maximum = max(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String format(String template, Object... args) { return String.format(template, args); } String template = 'Name: %s, Age: %d'; String name = 'Alice'; int age = 30; String formatted = format(template, name, age);", "Arguments": "template, name, age"},
    {"Preceding Code": "public static boolean isVowel(char c) { return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u'; } char letter = 'e'; boolean vowel = isVowel(letter);", "Arguments": "letter"},
    {"Preceding Code": "public static double average(double a, double b) { return (a + b) / 2; } double x = 5.5, y = 7.5; double avg = average(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static int length(String str) { return str.length(); } String text = 'Programming'; int len = length(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean contains(String str, char c) { return str.indexOf(c) != -1; } String text = 'Hello'; char ch = 'l'; boolean containsChar = contains(text, ch);", "Arguments": "text, ch"},
    {"Preceding Code": "public static double square(double num) { return num * num; } double number = 4.0; double squared = square(number);", "Arguments": "number"},
    {"Preceding Code": "public static int countDigits(int num) { return String.valueOf(num).length(); } int number = 12345; int digits = countDigits(number);", "Arguments": "number"},
    {"Preceding Code": "public static String toUpperCase(String str) { return str.toUpperCase(); } String text = 'hello'; String upper = toUpperCase(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isPrime(int num) { if (num <= 1) return false; for (int i = 2; i <= Math.sqrt(num); i++) if (num % i == 0) return false; return true; } int number = 17; boolean prime = isPrime(number);", "Arguments": "number"},
    {"Preceding Code": "public static double sqrt(double num) { return Math.sqrt(num); } double number = 16.0; double root = sqrt(number);", "Arguments": "number"},
    {"Preceding Code": "public static int factorial(int num) { if (num == 0) return 1; int result = 1; for (int i = 1; i <= num; i++) result *= i; return result; } int number = 5; int fact = factorial(number);", "Arguments": "number"},
    {"Preceding Code": "public static String reverse(String str) { return new StringBuilder(str).reverse().toString(); } String text = 'Java'; String reversed = reverse(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isPalindrome(String str) { String reversed = new StringBuilder(str).reverse().toString(); return str.equals(reversed); } String text = 'racecar'; boolean palindrome = isPalindrome(text);", "Arguments": "text"},
    {"Preceding Code": "public static double absolute(double num) { return Math.abs(num); } double number = -10.5; double absValue = absolute(number);", "Arguments": "number"},
    {"Preceding Code": "public static int[] range(int start, int end) { int[] result = new int[end - start]; for (int i = 0; i < result.length; i++) result[i] = start + i; return result; } int begin = 1, finish = 5; int[] rangeArray = range(begin, finish);", "Arguments": "begin, finish"},
    {"Preceding Code": "public static String join(String[] parts, String delimiter) { return String.join(delimiter, parts); } String[] words = {'Hello', 'World'}; String joined = join(words, ', ');", "Arguments": "words, ', '"},
    {"Preceding Code": "public static boolean isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } int year = 2024; boolean leapYear = isLeapYear(year);", "Arguments": "year"},
    {"Preceding Code": "public static double sin(double angle) { return Math.sin(angle); } double angle = Math.PI / 2; double sine = sin(angle);", "Arguments": "angle"},
    {"Preceding Code": "public static int countOccurrences(String str, char c) { int count = 0; for (int i = 0; i < str.length(); i++) if (str.charAt(i) == c) count++; return count; } String text = 'Mississippi'; char ch = 's'; int occurrences = countOccurrences(text, ch);", "Arguments": "text, ch"},
    {"Preceding Code": "public static String trim(String str) { return str.trim(); } String text = '   Hello World   '; String trimmed = trim(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isUpperCase(String str) { return str.equals(str.toUpperCase()); } String text = 'JAVA'; boolean upperCase = isUpperCase(text);", "Arguments": "text"},
    {"Preceding Code": "public static double log(double num) { return Math.log(num); } double number = 10.0; double logarithm = log(number);", "Arguments": "number"},
    {"Preceding Code": "public static int[] sort(int[] array) { Arrays.sort(array); return array; } int[] numbers = {3, 1, 4, 1, 5}; int[] sorted = sort(numbers);", "Arguments": "numbers"},
    {"Preceding Code": "public static String replace(String str, char oldChar, char newChar) { return str.replace(oldChar, newChar); } String text = 'Hello'; char old = 'l', newChar = 'x'; String replaced = replace(text, old, newChar);", "Arguments": "text, old, newChar"},
    {"Preceding Code": "public static boolean isLowercase(String str) { return str.equals(str.toLowerCase()); } String text = 'java'; boolean lowercase = isLowercase(text);", "Arguments": "text"},
    {"Preceding Code": "public static double min(double a, double b) { return Math.min(a, b); } double x = 8.5, y = 3.5; double minimum = min(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static int[] reverseArray(int[] array) { int[] reversed = new int[array.length]; for (int i = 0; i < array.length; i++) reversed[i] = array[array.length - 1 - i]; return reversed; } int[] numbers = {1, 2, 3, 4, 5}; int[] reversedArray = reverseArray(numbers);", "Arguments": "numbers"},
    {"Preceding Code": "public static String capitalize(String str) { return str.substring(0, 1).toUpperCase() + str.substring(1); } String text = 'java'; String capitalized = capitalize(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isDigit(char c) { return Character.isDigit(c); } char ch = '5'; boolean digit = isDigit(ch);", "Arguments": "ch"},
    {"Preceding Code": "public static double ceil(double num) { return Math.ceil(num); } double number = 3.14; double ceiling = ceil(number);", "Arguments": "number"},
    {"Preceding Code": "public static int[] append(int[] array, int element) { int[] newArray = Arrays.copyOf(array, array.length + 1); newArray[newArray.length - 1] = element; return newArray; } int[] numbers = {1, 2, 3}; int newElement = 4; int[] appended = append(numbers, newElement);", "Arguments": "numbers, newElement"},
    {"Preceding Code": "public static String[] split(String str, String delimiter) { return str.split(delimiter); } String text = 'apple,banana,cherry'; String[] parts = split(text, ',');", "Arguments": "text, ','"},
    {"Preceding Code": "public static boolean isAlphabetic(char c) { return Character.isAlphabetic(c); } char ch = 'a'; boolean alphabetic = isAlphabetic(ch);", "Arguments": "ch"},
    {"Preceding Code": "public static double floor(double num) { return Math.floor(num); } double number = 3.99; double floorValue = floor(number);", "Arguments": "number"},
    {"Preceding Code": "public static int[] remove(int[] array, int index) { int[] newArray = new int[array.length - 1]; for (int i = 0, j = 0; i < array.length; i++) if (i != index) newArray[j++] = array[i]; return newArray; } int[] numbers = {1, 2, 3, 4, 5}; int index = 2; int[] removed = remove(numbers, index);", "Arguments": "numbers, index"},
    {"Preceding Code": "public static String[] shuffle(String[] array) { Collections.shuffle(Arrays.asList(array)); return array; } String[] words = {'apple', 'banana', 'cherry'}; String[] shuffled = shuffle(words);", "Arguments": "words"},
    {"Preceding Code": "public static boolean isBlank(String str) { return str == null || str.trim().isEmpty(); } String text = '   '; boolean blank = isBlank(text);", "Arguments": "text"},
    {"Preceding Code": "public static double round(double num) { return Math.round(num); } double number = 3.6; double rounded = round(number);", "Arguments": "number"},
    {"Preceding Code": "public static int[] insert(int[] array, int index, int element) { int[] newArray = new int[array.length + 1]; System.arraycopy(array, 0, newArray, 0, index); newArray[index] = element; System.arraycopy(array, index, newArray, index + 1, array.length - index); return newArray; } int[] numbers = {1, 2, 3, 4}; int index = 2, element = 9; int[] inserted = insert(numbers, index, element);", "Arguments": "numbers, index, element"},
    {"Preceding Code": "public static String[] unique(String[] array) { Set<String> set = new HashSet<>(Arrays.asList(array)); return set.toArray(new String[0]); } String[] words = {'apple', 'banana', 'apple', 'cherry'}; String[] uniqueWords = unique(words);", "Arguments": "words"},
    {"Preceding Code": "public static boolean isNumeric(String str) { return str.matches('-?\\d+(\\.\\d+)?'); } String text = '123'; boolean numeric = isNumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspace(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceArray = linspace(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static int[] linspaceInt(int start, int end, int num) { int[] result = new int[num]; int step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } int begin = 0, finish = 10; int points = 5; int[] linspaceIntArray = linspaceInt(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static String[] linspaceStr(String start, String end, int num) { String[] result = new String[num]; for (int i = 0; i < num; i++) result[i] = start + i + end; return result; } String begin = 'a', finish = 'z'; int points = 5; String[] linspaceStrArray = linspaceStr(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static boolean isAlphanumeric(String str) { return str.matches('^[a-zA-Z0-9]+$'); } String text = 'abc123'; boolean alphanumeric = isAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] linspaceDouble(double start, double end, int num) { double[] result = new double[num]; double step = (end - start) / (num - 1); for (int i = 0; i < num; i++) result[i] = start + i * step; return result; } double begin = 0.0, finish = 1.0; int points = 5; double[] linspaceDoubleArray = linspaceDouble(begin, finish, points);", "Arguments": "begin, finish, points"},
    {"Preceding Code": "public static double multiply(double a, double b) { return a * b; } double m = 2.5, n = 4.0; double product = multiply(m, n);", "Arguments": "m, n"},
    {"Preceding Code": "public static int add(int x, int y) { return x + y; } int a = 5, b = 10; int sum = add(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String concatenate(String str1, String str2) { return str1 + str2; } String first = 'Hello', second = 'World'; String result = concatenate(first, second);", "Arguments": "first, second"},
    {"Preceding Code": "public static boolean isEven(int num) { return num % 2 == 0; } int number = 7; boolean even = isEven(number);", "Arguments": "number"},
    {"Preceding Code": "public static double divide(double numerator, double denominator) { return numerator / denominator; } double top = 15.0, bottom = 3.0; double quotient = divide(top, bottom);", "Arguments": "top, bottom"},
    {"Preceding Code": "public static char getFirstChar(String text) { return text.charAt(0); } String input = 'Example'; char firstChar = getFirstChar(input);", "Arguments": "input"},
    {"Preceding Code": "public static int square(int value) { return value * value; } int val = 9; int squared = square(val);", "Arguments": "val"},
    {"Preceding Code": "public static boolean isGreaterThan(int a, int b) { return a > b; } int num1 = 20, num2 = 15; boolean greater = isGreaterThan(num1, num2);", "Arguments": "num1, num2"},
    {"Preceding Code": "public static String toUpperCase(String text) { return text.toUpperCase(); } String lower = 'lowercase'; String upper = toUpperCase(lower);", "Arguments": "lower"},
    {"Preceding Code": "public static double calculateArea(double radius) { return Math.PI * radius * radius; } double r = 3.5; double area = calculateArea(r);", "Arguments": "r"},
    {"Preceding Code": "public static int subtract(int x, int y) { return x - y; } int p = 30, q = 12; int difference = subtract(p, q);", "Arguments": "p, q"},
    {"Preceding Code": "public static String repeatString(String str, int count) { String result = ''; for (int i = 0; i < count; i++) { result += str; } return result; } String text = 'abc', times = 3; String repeated = repeatString(text, times);", "Arguments": "text, times"},
    {"Preceding Code": "public static boolean checkLength(String str, int len) { return str.length() == len; } String word = 'test', length = 4; boolean correctLength = checkLength(word, length);", "Arguments": "word, length"},
    {"Preceding Code": "public static double average(double a, double b, double c) { return (a + b + c) / 3.0; } double x = 1.0, y = 2.0, z = 3.0; double avg = average(x, y, z);", "Arguments": "x, y, z"},
    {"Preceding Code": "public static int max(int a, int b) { return Math.max(a, b); } int m = 5, n = 8; int maximum = max(m, n);", "Arguments": "m, n"},
    {"Preceding Code": "public static boolean startsWith(String str, String prefix) { return str.startsWith(prefix); } String full = 'programming', start = 'pro'; boolean starts = startsWith(full, start);", "Arguments": "full, start"},
    {"Preceding Code": "public static int absoluteValue(int num) { return Math.abs(num); } int neg = -10; int absVal = absoluteValue(neg);", "Arguments": "neg"},
    {"Preceding Code": "public static String replace(String str, char oldChar, char newChar) { return str.replace(oldChar, newChar); } String original = 'apple', old = 'p', replacement = 'b'; String replaced = replace(original, old, replacement);", "Arguments": "original, old, replacement"},
    {"Preceding Code": "public static double power(double base, double exponent) { return Math.pow(base, exponent); } double baseVal = 2.0, expVal = 3.0; double resultPower = power(baseVal, expVal);", "Arguments": "baseVal, expVal"},
    {"Preceding Code": "public static boolean isEmpty(String str) { return str.isEmpty(); } String emptyString = ''; boolean empty = isEmpty(emptyString);", "Arguments": "emptyString"},
    {"Preceding Code": "public static int factorial(int num) { int fact = 1; for (int i = 1; i <= num; i++) { fact *= i; } return fact; } int factNum = 5; int factorialResult = factorial(factNum);", "Arguments": "factNum"},
    {"Preceding Code": "public static double calculateRectangleArea(double length, double width) { return length * width; } double len = 6.0, wid = 4.0; double rectArea = calculateRectangleArea(len, wid);", "Arguments": "len, wid"},
    {"Preceding Code": "public static boolean isPositive(int num) { return num > 0; } int posNum = 12; boolean positive = isPositive(posNum);", "Arguments": "posNum"},
    {"Preceding Code": "public static String trim(String str) { return str.trim(); } String spaced = '  test  '; String trimmed = trim(spaced);", "Arguments": "spaced"},
    {"Preceding Code": "public static int findMin(int a, int b) { return Math.min(a, b); } int x = 10, y = 5; int minimum = findMin(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static String substring(String str, int start, int end) { return str.substring(start, end); } String longStr = 'example', startIndex = 1, endIndex = 4; String sub = substring(longStr, startIndex, endIndex);", "Arguments": "longStr, startIndex, endIndex"},
    {"Preceding Code": "public static double calculateCircleCircumference(double radius) { return 2 * Math.PI * radius; } double rad = 7.0; double circ = calculateCircleCircumference(rad);", "Arguments": "rad"},
    {"Preceding Code": "public static boolean isNegative(int num) { return num < 0; } int negNum = -8; boolean negative = isNegative(negNum);", "Arguments": "negNum"},
    {"Preceding Code": "public static String toLowerCase(String str) { return str.toLowerCase(); } String upperCase = 'UPPER'; String lowerCase = toLowerCase(upperCase);", "Arguments": "upperCase"},
    {"Preceding Code": "public static int findMax(int a, int b) { return Math.max(a, b); } int p = 15, q = 9; int maximumValue = findMax(p, q);", "Arguments": "p, q"},
    {"Preceding Code": "public static String replaceAll(String str, String regex, String replacement) { return str.replaceAll(regex, replacement); } String textStr = 'test test', regexStr = 'test', replaceStr = 'check'; String replacedAll = replaceAll(textStr, regexStr, replaceStr);", "Arguments": "textStr, regexStr, replaceStr"},
    {"Preceding Code": "public static double calculateTriangleArea(double base, double height) { return 0.5 * base * height; } double baseVal = 8.0, heightVal = 5.0; double triArea = calculateTriangleArea(baseVal, heightVal);", "Arguments": "baseVal, heightVal"},
    {"Preceding Code": "public static boolean isZero(int num) { return num == 0; } int zeroNum = 0; boolean zero = isZero(zeroNum);", "Arguments": "zeroNum"},
    {"Preceding Code": "public static String concatWithSpace(String str1, String str2) { return str1 + ' ' + str2; } String firstWord = 'one', secondWord = 'two'; String concatSpace = concatWithSpace(firstWord, secondWord);", "Arguments": "firstWord, secondWord"},
    {"Preceding Code": "public static int countOccurrences(String str, char ch) { int count = 0; for (int i = 0; i < str.length(); i++) { if (str.charAt(i) == ch) { count++; } } return count; } String textString = 'hello', charToCount = 'l'; int occurrences = countOccurrences(textString, charToCount);", "Arguments": "textString, charToCount"},
    {"Preceding Code": "public static double calculateSphereVolume(double radius) { return (4.0 / 3.0) * Math.PI * Math.pow(radius, 3); } double sphereRadius = 4.0; double sphereVol = calculateSphereVolume(sphereRadius);", "Arguments": "sphereRadius"},
    {"Preceding Code": "public static boolean isPalindrome(String str) { String reversed = new StringBuilder(str).reverse().toString(); return str.equals(reversed); } String palindromeStr = 'madam'; boolean palindrome = isPalindrome(palindromeStr);", "Arguments": "palindromeStr"},
    {"Preceding Code": "public static String reverseString(String str) { return new StringBuilder(str).reverse().toString(); } String stringToReverse = 'hello'; String reversedString = reverseString(stringToReverse);", "Arguments": "stringToReverse"},
    {"Preceding Code": "public static int sumOfDigits(int num) { int sum = 0; while (num > 0) { sum += num % 10; num /= 10; } return sum; } int digitNum = 123; int sumDigits = sumOfDigits(digitNum);", "Arguments": "digitNum"},
    {"Preceding Code": "public static double calculateCylinderVolume(double radius, double height) { return Math.PI * radius * radius * height; } double cylinderRadius = 2.0, cylinderHeight = 5.0; double cylinderVol = calculateCylinderVolume(cylinderRadius, cylinderHeight);", "Arguments": "cylinderRadius, cylinderHeight"},
    {"Preceding Code": "public static boolean isVowel(char ch) { ch = Character.toLowerCase(ch); return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u'; } char charToCheck = 'A'; boolean vowel = isVowel(charToCheck);", "Arguments": "charToCheck"},
    {"Preceding Code": "public static int countWords(String str) { if (str == null || str.isEmpty()) { return 0; } Stringwords = str.split('\\\\s+'); return words.length; } String sentence = 'This is a sentence.'; int wordCount = countWords(sentence);", "Arguments": "sentence"},
    {"Preceding Code": "public static double calculateConeVolume(double radius, double height) { return (1.0 / 3.0) * Math.PI * radius * radius * height; } double coneRadius = 3.0, coneHeight = 6.0; double coneVol = calculateConeVolume(coneRadius, coneHeight);", "Arguments": "coneRadius, coneHeight"},
    {"Preceding Code": "public static boolean isConsonant(char ch) { ch = Character.toLowerCase(ch); return Character.isLetter(ch) && !isVowel(ch); } char charToCheck2 = 'b'; boolean consonant = isConsonant(charToCheck2);", "Arguments": "charToCheck2"},
    {"Preceding Code": "public static String removeDuplicates(String str) { StringBuilder sb = new StringBuilder(); for (int i = 0; i < str.length(); i++) { char ch = str.charAt(i); if (sb.indexOf(String.valueOf(ch)) == -1) { sb.append(ch); } } return sb.toString(); } String stringDup = 'aabbcc'; String noDup = removeDuplicates(stringDup);", "Arguments": "stringDup"},
    {"Preceding Code": "public static double calculatePyramidVolume(double baseArea, double height) { return (1.0 / 3.0) * baseArea * height; } double pyramidBaseArea = 10.0, pyramidHeight = 7.0; double pyramidVol = calculatePyramidVolume(pyramidBaseArea, pyramidHeight);", "Arguments": "pyramidBaseArea, pyramidHeight"},
    {"Preceding Code": "public static boolean isAlphaNumeric(char ch) { return Character.isLetterOrDigit(ch); } char charToCheck3 = '7'; boolean alphaNum = isAlphaNumeric(charToCheck3);", "Arguments": "charToCheck3"},
    {"Preceding Code": "public static String capitalizeFirstLetter(String str) { if (str == null || str.isEmpty()) { return str; } return str.substring(0, 1).toUpperCase() + str.substring(1); } String stringCap = 'test'; String capitalized = capitalizeFirstLetter(stringCap);", "Arguments": "stringCap"},
    {"Preceding Code": "public static int countCharacters(String str) { return str.length(); } String stringCount = 'example'; int charCount = countCharacters(stringCount);", "Arguments": "stringCount"},
    {"Preceding Code": "public static double calculateCubeVolume(double side) { return Math.pow(side, 3); } double cubeSide = 5.0; double cubeVol = calculateCubeVolume(cubeSide);", "Arguments": "cubeSide"},
    {"Preceding Code": "public static boolean isUpperCase(char ch) { return Character.isUpperCase(ch); } char charToCheck4 = 'Z'; boolean upperCaseChar = isUpperCase(charToCheck4);", "Arguments": "charToCheck4"},
    {"Preceding Code": "public static String removeWhitespace(String str) { return str.replaceAll('\\\\s+', ''); } String stringSpace = '  t e s t  '; String noSpace = removeWhitespace(stringSpace);", "Arguments": "stringSpace"},
    {"Preceding Code": "public static int countDigits(String str) { int count = 0; for (int i = 0; i < str.length(); i++) { if (Character.isDigit(str.charAt(i))) { count++; } } return count; } String stringDigits = 'abc123def'; int digitCount = countDigits(stringDigits);", "Arguments": "stringDigits"},
    {"Preceding Code": "public static double calculateParallelogramArea(double base, double height) { return base * height; } double parallelogramBase = 8.0, parallelogramHeight = 6.0; double parallelogramArea = calculateParallelogramArea(parallelogramBase, parallelogramHeight);", "Arguments": "parallelogramBase, parallelogramHeight"},
    {"Preceding Code": "public static boolean isLowerCase(char ch) { return Character.isLowerCase(ch); } char charToCheck5 = 'a'; boolean lowerCaseChar = isLowerCase(charToCheck5);", "Arguments": "charToCheck5"},
    {"Preceding Code": "public static String replaceFirst(String str, String regex, String replacement) { return str.replaceFirst(regex, replacement); } String stringReplaceFirst = 'test test test', regexFirst = 'test', replaceFirstWith = 'check'; String replacedFirst = replaceFirst(stringReplaceFirst, regexFirst, replaceFirstWith);", "Arguments": "stringReplaceFirst, regexFirst, replaceFirstWith"},
    {"Preceding Code": "public static int countLetters(String str) { int count = 0; for (int i = 0; i < str.length(); i++) { if (Character.isLetter(str.charAt(i))) { count++; } } return count; } String stringLetters = 'abc123def'; int letterCount = countLetters(stringLetters);", "Arguments": "stringLetters"},
    {"Preceding Code": "public static double calculateRhombusArea(double diagonal1, double diagonal2) { return 0.5 * diagonal1 * diagonal2; } double rhombusDiagonal1 = 10.0, rhombusDiagonal2 = 6.0; double rhombusArea = calculateRhombusArea(rhombusDiagonal1, rhombusDiagonal2);", "Arguments": "rhombusDiagonal1, rhombusDiagonal2"},
    {"Preceding Code": "public static boolean isDigit(char ch) { return Character.isDigit(ch); } char charToCheck6 = '9'; boolean digitChar = isDigit(charToCheck6);", "Arguments": "charToCheck6"},
    {"Preceding Code": "public static int countVowels(String str) { int count = 0; for (int i = 0; i < str.length(); i++) { if (isVowel(str.charAt(i))) { count++; } } return count; } String stringVowels = 'aeiou'; int vowelCount = countVowels(stringVowels);", "Arguments": "stringVowels"},
    {"Preceding Code": "public static double calculateTrapezoidArea(double base1, double base2, double height) { return 0.5 * (base1 + base2) * height; } double trapezoidBase1 = 5.0, trapezoidBase2 = 7.0, trapezoidHeight = 4.0; double trapezoidArea = calculateTrapezoidArea(trapezoidBase1, trapezoidBase2, trapezoidHeight);", "Arguments": "trapezoidBase1, trapezoidBase2, trapezoidHeight"},
    {"Preceding Code": "public static boolean isLetter(char ch) { return Character.isLetter(ch); } char charToCheck7 = 'g'; boolean letterChar = isLetter(charToCheck7);", "Arguments": "charToCheck7"},
    {"Preceding Code": "public static String removeCharacter(String str, char ch) { return str.replace(String.valueOf(ch), ''); } String stringRemove = 'hello', charToRemove = 'l'; String removedString = removeCharacter(stringRemove, charToRemove);", "Arguments": "stringRemove, charToRemove"},
    {"Preceding Code": "public static int countConsonants(String str) { int count = 0; for (int i = 0; i < str.length(); i++) { if (isConsonant(str.charAt(i))) { count++; } } return count; } String stringConsonants = 'bcdfgh'; int consonantCount = countConsonants(stringConsonants);", "Arguments": "stringConsonants"},
    {"Preceding Code": "public static double calculateEllipseArea(double majorAxis, double minorAxis) { return Math.PI * majorAxis * minorAxis; } double ellipseMajorAxis = 6.0, ellipseMinorAxis = 4.0; double ellipseArea = calculateEllipseArea(ellipseMajorAxis, ellipseMinorAxis);", "Arguments": "ellipseMajorAxis, ellipseMinorAxis"},
    {"Preceding Code": "public static boolean isWhitespace(char ch) { return Character.isWhitespace(ch); } char charToCheck8 = ' '; boolean whitespaceChar = isWhitespace(charToCheck8);", "Arguments": "charToCheck8"},
    {"Preceding Code": "public static String replaceSubstring(String str, String target, String replacement) { return str.replace(target, replacement); } String stringReplaceSub = 'test test', targetSub = 'test', replacementSub = 'check'; String replacedSubstring = replaceSubstring(stringReplaceSub, targetSub, replacementSub);", "Arguments": "stringReplaceSub, targetSub, replacementSub"},
    {"Preceding Code": "public static int countSpecialCharacters(String str) { int count = 0; for (int i = 0; i < str.length(); i++) { char ch = str.charAt(i); if (!Character.isLetterOrDigit(ch) && !Character.isWhitespace(ch)) { count++; } } String stringSpecial = 'abc!@#'; int specialCount = countSpecialCharacters(stringSpecial);", "Arguments": "stringSpecial"},
    {"Preceding Code": "public static double calculateSectorArea(double radius, double angle) { return 0.5 * radius * radius * Math.toRadians(angle); } double sectorRadius = 5.0, sectorAngle = 60.0; double sectorArea = calculateSectorArea(sectorRadius, sectorAngle);", "Arguments": "sectorRadius, sectorAngle"},
    {"Preceding Code": "public static boolean isAlphabetic(String str) { return str.matches('[a-zA-Z]+'); } String stringAlpha = 'abcABC'; boolean alphabeticString = isAlphabetic(stringAlpha);", "Arguments": "stringAlpha"},
    {"Preceding Code": "public static String removeAllOccurrences(String str, char ch) { return str.replace(String.valueOf(ch), ''); } String stringRemoveAll = 'hello', charToRemoveAll = 'l'; String removedAllString = removeAllOccurrences(stringRemoveAll, charToRemoveAll);", "Arguments": "stringRemoveAll, charToRemoveAll"},
    {"Preceding Code": "public static int countOccurrencesOfString(String text, String target) { int count = 0; for (int i = 0; i <= text.length() - target.length(); i++) { if (text.substring(i, i + target.length()).equals(target)) { count++; } } return count; } String textStringOccurrences = 'test test test', targetStringOccurrences = 'test'; int stringOccurrencesCount = countOccurrencesOfString(textStringOccurrences, targetStringOccurrences);", "Arguments": "textStringOccurrences, targetStringOccurrences"},
    {"Preceding Code": "public static double calculateAnnulusArea(double outerRadius, double innerRadius) { return Math.PI * (outerRadius * outerRadius - innerRadius * innerRadius); } double annulusOuterRadius = 7.0, annulusInnerRadius = 5.0; double annulusArea = calculateAnnulusArea(annulusOuterRadius, annulusInnerRadius);", "Arguments": "annulusOuterRadius, annulusInnerRadius"},
    {"Preceding Code": "public static boolean containsOnlyDigits(String str) { return str.matches('\\\\d+'); } String stringDigitsOnly = '12345'; boolean digitsOnlyString = containsOnlyDigits(stringDigitsOnly);", "Arguments": "stringDigitsOnly"},
    {"Preceding Code": "public static String replaceLast(String text, String regex, String replacement) { return text.replaceFirst('(?s)(.*)' + regex, '$1' + replacement); } String stringReplaceLast = 'test test test', regexLast = 'test', replacementLast = 'check'; String replacedLast = replaceLast(stringReplaceLast, regexLast, replacementLast);", "Arguments": "stringReplaceLast, regexLast, replacementLast"},
    {"Preceding Code": "public static int countWordsWithLength(String str, int length) { if (str == null || str.isEmpty()) { return 0; } Stringwords = str.split('\\\\s+'); int count = 0; for (String word : words) { if (word.length() == length) { count++; } } return count; } String stringWordsLength = 'one two three', wordLength = 3; int wordsWithLengthCount = countWordsWithLength(stringWordsLength, wordLength);", "Arguments": "stringWordsLength, wordLength"},
    {"Preceding Code": "public static double calculateSphereSurfaceArea(double radius) { return 4 * Math.PI * radius * radius; } double sphereSurfaceRadius = 6.0; double sphereSurface = calculateSphereSurfaceArea(sphereSurfaceRadius);", "Arguments": "sphereSurfaceRadius"},
    {"Preceding Code": "public static boolean isPalindromeIgnoreCase(String str) { String cleanStr = str.replaceAll('[^a-zA-Z0-9]', '').toLowerCase(); String reversed = new StringBuilder(cleanStr).reverse().toString(); return cleanStr.equals(reversed); } String stringPalindromeCase = 'A man, a plan, a canal: Panama'; boolean palindromeIgnoreCase = isPalindromeIgnoreCase(stringPalindromeCase);", "Arguments": "stringPalindromeCase"},
    {"Preceding Code": "public static String removeLastCharacter(String str) { if (str == null || str.isEmpty()) { return str; } return str.substring(0, str.length() - 1); } String stringRemoveLast = 'hello'; String removedLast = removeLastCharacter(stringRemoveLast);", "Arguments": "stringRemoveLast"},
    {"Preceding Code": "public static int countSubstrings(String text, String target) { int count = 0; for (int i = 0; i <= text.length() - target.length(); i++) { for (int j = 0; j <= text.length() - target.length(); j++) { if (text.substring(j, j + target.length()).equals(target)) { count++; } } } return count; } String textStringSubstrings = 'abababa', targetStringSubstrings = 'aba'; int substringsCount = countSubstrings(textStringSubstrings, targetStringSubstrings);", "Arguments": "textStringSubstrings, targetStringSubstrings"},
    {"Preceding Code": "public static double calculateHemisphereVolume(double radius) { return (2.0 / 3.0) * Math.PI * Math.pow(radius, 3); } double hemisphereRadius = 5.0; double hemisphereVolume = calculateHemisphereVolume(hemisphereRadius);", "Arguments": "hemisphereRadius"},
    {"Preceding Code": "public static boolean isAnagram(String str1, String str2) { if (str1.length() != str2.length()) { return false; } charcharArray1 = str1.toCharArray(); charcharArray2 = str2.toCharArray(); java.util.Arrays.sort(charArray1); java.util.Arrays.sort(charArray2); return java.util.Arrays.equals(charArray1, charArray2); } String stringAnagram1 = 'listen', stringAnagram2 = 'silent'; boolean anagram = isAnagram(stringAnagram1, stringAnagram2);", "Arguments": "stringAnagram1, stringAnagram2"},
    {"Preceding Code": "public static String reverseWords(String str) { Stringwords = str.split(' '); StringBuilder reversed = new StringBuilder(); for (int i = words.length - 1; i >= 0; i--) { reversed.append(words[i]).append(' '); } return reversed.toString().trim(); } String stringWordsReverse = 'the quick brown fox'; String reversedWords = reverseWords(stringWordsReverse);", "Arguments": "stringWordsReverse"},
    {"Preceding Code": "public static int countUniqueCharacters(String str) { java.util.Set<Character> chars = new java.util.HashSet<>(); for (int i = 0; i < str.length(); i++) { chars.add(str.charAt(i)); } return chars.size(); } String stringUniqueChars = 'aabbc'; int uniqueCharsCount = countUniqueCharacters(stringUniqueChars);", "Arguments": "stringUniqueChars"},
    {"Preceding Code": "public static double calculateCompoundInterest(double principal, double rate, int time, int n) { return principal * Math.pow((1 + rate / n), n * time) - principal; } double principalAmount = 1000.0, interestRate = 0.05, investmentTime = 5, compoundFrequency = 12; double compoundInterest = calculateCompoundInterest(principalAmount, interestRate, investmentTime, compoundFrequency);", "Arguments": "principalAmount, interestRate, investmentTime, compoundFrequency"},
    {"Preceding Code": "public static boolean isPerfectNumber(int num) { if (num <= 1) { return false; } int sum = 1; for (int i = 2; i * i <= num; i++) { if (num % i == 0) { sum += i; if (i != num / i) { sum += num / i; } } } return sum == num; } int numberPerfect = 28; boolean perfectNumber = isPerfectNumber(numberPerfect);", "Arguments": "numberPerfect"},
    {"Preceding Code": "public static String replaceNthOccurrence(String text, String target, String replacement, int n) { int count = 0; int index = -1; while ((index = text.indexOf(target, index + 1)) != -1) { count++; if (count == n) { return text.substring(0, index) + replacement + text.substring(index + target.length()); } } return text; } String stringReplaceNth = 'test test test', targetStringReplaceNth = 'test', replacementStringReplaceNth = 'check', nthOccurrence = 2; String replacedNth = replaceNthOccurrence(stringReplaceNth, targetStringReplaceNth, replacementStringReplaceNth, nthOccurrence);", "Arguments": "stringReplaceNth, targetStringReplaceNth, replacementStringReplaceNth, nthOccurrence"},
    {"Preceding Code": "public static int countWordsInString(String str) { if (str == null || str.isEmpty()) { return 0; } Stringwords = str.split('\\\\s+'); return words.length; } String stringCountWords = 'This is a string'; int wordsInStringCount = countWordsInString(stringCountWords);", "Arguments": "stringCountWords"},
    {"Preceding Code": "public static double calculateSimpleInterest(double principal, double rate, int time) { return (principal * rate * time) / 100; } double principalAmountSimple = 1000.0, interestRateSimple = 0.05, timePeriodSimple = 3; double simpleInterest = calculateSimpleInterest(principalAmountSimple, interestRateSimple, timePeriodSimple);", "Arguments": "principalAmountSimple, interestRateSimple, timePeriodSimple"},
    {"Preceding Code": "public static boolean isPrime(int num) { if (num <= 1) return false; for (int i = 2; i <= Math.sqrt(num); i++) { if (num % i == 0) return false; } return true; } int primeNumber = 17; boolean isPrimeNumber = isPrime(primeNumber);", "Arguments": "primeNumber"},
    {"Preceding Code": "public static String removeExtraSpaces(String str) { return str.replaceAll(\"\\\\s+\", \" \").trim(); } String stringWithExtraSpaces = \"  hello   world  \"; String cleanedString = removeExtraSpaces(stringWithExtraSpaces);", "Arguments": "stringWithExtraSpaces"},
    {"Preceding Code": "public static int findSecondLargest(int[] arr) { java.util.Arrays.sort(arr); return arr[arr.length - 2]; } int[] intArray = {5, 10, 15, 20}; int secondLargest = findSecondLargest(intArray);", "Arguments": "intArray"},
    {"Preceding Code": "public static double calculateGeometricMean(double[] arr) { double product = 1; for (double num : arr) { product *= num; } return Math.pow(product, 1.0 / arr.length); } double[] doubleArray = {2, 8, 32}; double geometricMean = calculateGeometricMean(doubleArray);", "Arguments": "doubleArray"},
    {"Preceding Code": "public static boolean isArmstrongNumber(int num) { int temp = num, sum = 0, digits = String.valueOf(num).length(); while (temp > 0) { int digit = temp % 10; sum += Math.pow(digit, digits); temp /= 10; } return sum == num; } int armstrongNumber = 153; boolean isArmstrong = isArmstrongNumber(armstrongNumber);", "Arguments": "armstrongNumber"},
    {"Preceding Code": "public static String getInitials(String fullName) { String[] names = fullName.split(\" \"); StringBuilder initials = new StringBuilder(); for (String name : names) { initials.append(name.charAt(0)); } return initials.toString(); } String personName = \"John Doe\"; String personInitials = getInitials(personName);", "Arguments": "personName"},
    {"Preceding Code": "public static int countFrequency(int[] arr, int target) { int count = 0; for (int num : arr) { if (num == target) count++; } return count; } int[] frequencyArray = {1, 2, 2, 3, 4, 2}; int targetValue = 2; int frequency = countFrequency(frequencyArray, targetValue);", "Arguments": "frequencyArray, targetValue"},
    {"Preceding Code": "public static double calculateHarmonicMean(double[] arr) { double sum = 0; for (double num : arr) { sum += 1.0 / num; } return arr.length / sum; } double[] harmonicArray = {2, 4, 8}; double harmonicMean = calculateHarmonicMean(harmonicArray);", "Arguments": "harmonicArray"},
    {"Preceding Code": "public static boolean isPerfectSquare(int num) { if (num < 0) return false; int sqrt = (int) Math.sqrt(num); return sqrt * sqrt == num; } int squareNumber = 25; boolean isPerfectSquareNumber = isPerfectSquare(squareNumber);", "Arguments": "squareNumber"},
    {"Preceding Code": "public static String reverseEachWord(String str) { String[] words = str.split(\" \"); StringBuilder reversed = new StringBuilder(); for (String word : words) { reversed.append(new StringBuilder(word).reverse()).append(\" \"); } return reversed.toString().trim(); } String sentenceToReverse = \"hello world\"; String reversedSentence = reverseEachWord(sentenceToReverse);", "Arguments": "sentenceToReverse"},
    {"Preceding Code": "public static int findMissingNumber(int[] arr, int n) { int sum = (n * (n + 1)) / 2; int arrSum = 0; for (int num : arr) { arrSum += num; } return sum - arrSum; } int[] missingArray = {1, 2, 4, 5}; int arraySize = 5; int missingNumber = findMissingNumber(missingArray, arraySize);", "Arguments": "missingArray, arraySize"},
    {"Preceding Code": "public static double calculateStandardDeviation(double[] arr) { double mean = java.util.Arrays.stream(arr).average().orElse(Double.NaN); double sum = 0; for (double num : arr) { sum += Math.pow(num - mean, 2); } return Math.sqrt(sum / (arr.length - 1)); } double[] stdDevArray = {1, 2, 3, 4, 5}; double standardDeviation = calculateStandardDeviation(stdDevArray);", "Arguments": "stdDevArray"},
    {"Preceding Code": "public static boolean isStrongNumber(int num) { int temp = num, sum = 0; while (temp > 0) { int digit = temp % 10; int fact = 1; for (int i = 1; i <= digit; i++) fact *= i; sum += fact; temp /= 10; } return sum == num; } int strongNumber = 145; boolean isStrong = isStrongNumber(strongNumber);", "Arguments": "strongNumber"},
    {"Preceding Code": "public static String sortCharacters(String str) { char[] chars = str.toCharArray(); java.util.Arrays.sort(chars); return new String(chars); } String stringToSort = \"bacd\"; String sortedString = sortCharacters(stringToSort);", "Arguments": "stringToSort"},
    {"Preceding Code": "public static int findPeakElement(int[] arr) { for (int i = 1; i < arr.length - 1; i++) { if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) return i; } return -1; } int[] peakArray = {1, 2, 3, 1}; int peakIndex = findPeakElement(peakArray);", "Arguments": "peakArray"},
    {"Preceding Code": "public static double calculateVariance(double[] arr) { double mean = java.util.Arrays.stream(arr).average().orElse(Double.NaN); double sum = 0; for (double num : arr) { sum += Math.pow(num - mean, 2); } return sum / arr.length; } double[] varianceArray = {1, 2, 3, 4, 5}; double variance = calculateVariance(varianceArray);", "Arguments": "varianceArray"},
    {"Preceding Code": "public static boolean isAutomorphicNumber(int num) { long square = (long) num * num; return String.valueOf(square).endsWith(String.valueOf(num)); } int autoNumber = 25; boolean isAutomorphic = isAutomorphicNumber(autoNumber);", "Arguments": "autoNumber"},
    {"Preceding Code": "public static String capitalizeWords(String str) { String[] words = str.split(\" \"); StringBuilder capitalized = new StringBuilder(); for (String word : words) { if (!word.isEmpty()) { capitalized.append(word.substring(0, 1).toUpperCase()).append(word.substring(1)).append(\" \"); } } return capitalized.toString().trim(); } String sentenceToCapitalize = \"hello world\"; String capitalizedSentence = capitalizeWords(sentenceToCapitalize);", "Arguments": "sentenceToCapitalize"},
    {"Preceding Code": "public static int findFirstDuplicate(int[] arr) { java.util.Set<Integer> seen = new java.util.HashSet<>(); for (int num : arr) { if (seen.contains(num)) return num; seen.add(num); } return -1; } int[] duplicateArray = {1, 2, 3, 2, 4}; int firstDuplicate = findFirstDuplicate(duplicateArray);", "Arguments": "duplicateArray"},
    {"Preceding Code": "public static double calculateMedian(double[] arr) { java.util.Arrays.sort(arr); int middle = arr.length / 2; if (arr.length % 2 == 0) { return (arr[middle - 1] + arr[middle]) / 2.0; } else { return arr[middle]; } } double[] medianArray = {1, 3, 2, 4, 5}; double medianValue = calculateMedian(medianArray);", "Arguments": "medianArray"},
    {"Preceding Code": "public static String findLongestWord(String str) { String[] words = str.split(\" \"); String longest = \"\"; for (String word : words) { if (word.length() > longest.length()) longest = word; } return longest; } String sentenceLongest = \"find the longest word\"; String longestWord = findLongestWord(sentenceLongest);", "Arguments": "sentenceLongest"},
    {"Preceding Code": "public static int findGCD(int a, int b) { while (b != 0) { int temp = b; b = a % b; a = temp; } return a; } int num1GCD = 48, num2GCD = 18; int gcdValue = findGCD(num1GCD, num2GCD);", "Arguments": "num1GCD, num2GCD"},
    {"Preceding Code": "public static double calculateMode(double[] arr) { java.util.Map<Double, Integer> frequencyMap = new java.util.HashMap<>(); int maxFrequency = 0; double mode = Double.NaN; for (double num : arr) { frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1); if (frequencyMap.get(num) > maxFrequency) { maxFrequency = frequencyMap.get(num); mode = num; } } return mode; } double[] modeArray = {1, 2, 2, 3, 4}; double modeValue = calculateMode(modeArray);", "Arguments": "modeArray"},
    {"Preceding Code": "public static boolean isFibonacciNumber(int num) { int a = 5 * num * num + 4; int b = 5 * num * num - 4; return isPerfectSquare((int) a) || isPerfectSquare((int) b); } int fibNumber = 8; boolean isFibonacci = isFibonacciNumber(fibNumber);", "Arguments": "fibNumber"},
    {"Preceding Code": "public static String removeAllNonAlphaNumeric(String str) { return str.replaceAll(\"[^\\\\w\\\\s]\", \"\"); } String stringWithNonAlpha = \"hello!@#world\"; String cleanedNonAlpha = removeAllNonAlphaNumeric(stringWithNonAlpha);", "Arguments": "stringWithNonAlpha"},
    {"Preceding Code": "public static int findPairsWithSum(int[] arr, int target) { int count = 0; java.util.Set<Integer> seen = new java.util.HashSet<>(); for (int num : arr) { if (seen.contains(target - num)) count++; seen.add(num); } return count; } int[] pairArray = {1, 2, 3, 4, 5}; int targetSum = 6; int pairCount = findPairsWithSum(pairArray, targetSum);", "Arguments": "pairArray, targetSum"},
    {"Preceding Code": "public static double calculateRootMeanSquare(double[] arr) { double sum = 0; for (double num : arr) { sum += num * num; } return Math.sqrt(sum / arr.length); } double[] rmsArray = {1, 2, 3, 4, 5}; double rmsValue = calculateRootMeanSquare(rmsArray);", "Arguments": "rmsArray"},
    {"Preceding Code": "public static boolean isHarshadNumber(int num) { int sum = 0, temp = num; while (temp > 0) { sum += temp % 10; temp /= 10; } return num % sum == 0; } int harshadNumber = 18; boolean isHarshad = isHarshadNumber(harshadNumber);", "Arguments": "harshadNumber"},
    {"Preceding Code": "public static String reverseWordsInSentence(String str) { String[] words = str.split(\" \"); StringBuilder reversed = new StringBuilder(); for (String word : words) { reversed.append(new StringBuilder(word).reverse()).append(\" \"); } return reversed.toString().trim(); } String sentenceWordsReverse = \"hello world\"; String reversedSentenceWords = reverseWordsInSentence(sentenceWordsReverse);", "Arguments": "sentenceWordsReverse"},
    {"Preceding Code": "public static int findKthLargest(int[] arr, int k) { java.util.Arrays.sort(arr); return arr[arr.length - k]; } int[] kthLargestArray = {3, 2, 1, 5, 6, 4}; int kthValue = 2; int kthLargest = findKthLargest(kthLargestArray, kthValue);", "Arguments": "kthLargestArray, kthValue"},
    {"Preceding Code": "public static double calculateRange(double[] arr) { double min = java.util.Arrays.stream(arr).min().orElse(Double.NaN); double max = java.util.Arrays.stream(arr).max().orElse(Double.NaN); return max - min; } double[] rangeArray = {1, 2, 3, 4, 5}; double rangeValue = calculateRange(rangeArray);", "Arguments": "rangeArray"},
    {"Preceding Code": "public static boolean isPronicNumber(int num) { int i = 0; while (i * (i + 1) <= num) { if (i * (i + 1) == num) return true; i++; } return false; } int pronicNumber = 6; boolean isPronic = isPronicNumber(pronicNumber);", "Arguments": "pronicNumber"},
    {"Preceding Code": "public static String removeDuplicateWords(String str) { String[] words = str.split(\" \"); java.util.LinkedHashSet<String> set = new java.util.LinkedHashSet<>(java.util.Arrays.asList(words)); return String.join(\" \", set); } String sentenceDuplicateWords = \"hello world hello\"; String cleanedDuplicateWords = removeDuplicateWords(sentenceDuplicateWords);", "Arguments": "sentenceDuplicateWords"},
    {"Preceding Code": "public static int findFirstNonRepeating(int[] arr) { java.util.Map<Integer, Integer> frequencyMap = new java.util.HashMap<>(); for (int num : arr) { frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1); } for (int num : arr) { if (frequencyMap.get(num) == 1) return num; } return -1; } int[] nonRepeatingArray = {1, 2, 3, 1, 2, 4}; int nonRepeating = findFirstNonRepeating(nonRepeatingArray);", "Arguments": "nonRepeatingArray"},
    {"Preceding Code": "public static double calculateInterquartileRange(double[] arr) { java.util.Arrays.sort(arr); int q1Index = arr.length / 4; int q3Index = 3 * arr.length / 4; double q1 = arr[q1Index]; double q3 = arr[q3Index]; return q3 - q1; } double[] iqrArray = {1, 2, 3, 4, 5, 6, 7, 8}; double iqrValue = calculateInterquartileRange(iqrArray);", "Arguments": "iqrArray"},
    {"Preceding Code": "public static boolean isAbundantNumber(int num) { if (num <= 1) return false; int sum = 1; for (int i = 2; i * i <= num; i++) { if (num % i == 0) { sum += i; if (i * i != num) sum += num / i; } } return sum > num; } int abundantNumber = 12; boolean isAbundant = isAbundantNumber(abundantNumber);", "Arguments": "abundantNumber"},
    {"Preceding Code": "public static String extractNumbersFromString(String str) { return str.replaceAll(\"[^\\\\d]\", \"\"); } String stringWithNumbers = \"abc123def456\"; String extractedNumbers = extractNumbersFromString(stringWithNumbers);", "Arguments": "stringWithNumbers"},
    {"Preceding Code": "public static int findSecondSmallest(int[] arr) { java.util.Arrays.sort(arr); return arr[1]; } int[] smallestArray = {5, 10, 15, 20, 1, 2}; int secondSmallest = findSecondSmallest(smallestArray);", "Arguments": "smallestArray"},
    {"Preceding Code": "public static double calculateMidrange(double[] arr) { double min = java.util.Arrays.stream(arr).min().orElse(Double.NaN); double max = java.util.Arrays.stream(arr).max().orElse(Double.NaN); return (min + max) / 2.0; } double[] midrangeArray = {1, 2, 3, 4, 5}; double midrangeValue = calculateMidrange(midrangeArray);", "Arguments": "midrangeArray"},
    {"Preceding Code": "public static int findLCM(int a, int b) { return (a * b) / findGCD(a, b); } int num1LCM = 12, num2LCM = 18; int lcmValue = findLCM(num1LCM, num2LCM);", "Arguments": "num1LCM, num2LCM"},
    {"Preceding Code": "public static String removeLeadingZeros(String str) { return str.replaceFirst(\"^0+(?!$)\", \"\"); } String stringWithZeros = \"000123\"; String cleanedZeros = removeLeadingZeros(stringWithZeros);", "Arguments": "stringWithZeros"},
    {"Preceding Code": "public static int findMajorityElement(int[] arr) { java.util.Map<Integer, Integer> frequencyMap = new java.util.HashMap<>(); for (int num : arr) { frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1); if (frequencyMap.get(num) > arr.length / 2) return num; } return -1; } int[] majorityArray = {1, 2, 2, 2, 3}; int majorityElement = findMajorityElement(majorityArray);", "Arguments": "majorityArray"},
    {"Preceding Code": "public static double calculateSkewness(double[] arr) { double mean = java.util.Arrays.stream(arr).average().orElse(Double.NaN); double stdDev = calculateStandardDeviation(arr); double sum = 0; for (double num : arr) { sum += Math.pow((num - mean) / stdDev, 3); } return sum / arr.length; } double[] skewnessArray = {1, 2, 3, 4, 10}; double skewnessValue = calculateSkewness(skewnessArray);", "Arguments": "skewnessArray"},
    {"Preceding Code": "public static boolean isDeficientNumber(int num) { if (num <= 1) return false; int sum = 1; for (int i = 2; i * i <= num; i++) { if (num % i == 0) { sum += i; if (i * i != num) sum += num / i; } } return sum < num; } int deficientNumber = 21; boolean isDeficient = isDeficientNumber(deficientNumber);", "Arguments": "deficientNumber"},
    {"Preceding Code": "public static String extractWordsWithLength(String str, int length) { String[] words = str.split(\" \"); StringBuilder result = new StringBuilder(); for (String word : words) { if (word.length() == length) result.append(word).append(\" \"); } return result.toString().trim(); } String sentenceExtractWords = \"find words of length 4\"; int wordLengthExtract = 4; String extractedWordsLength = extractWordsWithLength(sentenceExtractWords, wordLengthExtract);", "Arguments": "sentenceExtractWords, wordLengthExtract"},
    {"Preceding Code": "public static int findFirstRepeating(int[] arr) { java.util.Set<Integer> seen = new java.util.HashSet<>(); for (int num : arr) { if (seen.contains(num)) return num; seen.add(num); } return -1; } int[] repeatingArray = {1, 2, 3, 2, 4}; int firstRepeating = findFirstRepeating(repeatingArray);", "Arguments": "repeatingArray"},
    {"Preceding Code": "public static double calculateKurtosis(double[] arr) { double mean = java.util.Arrays.stream(arr).average().orElse(Double.NaN); double stdDev = calculateStandardDeviation(arr); double sum = 0; for (double num : arr) { sum += Math.pow((num - mean) / stdDev, 4); } return (sum / arr.length) - 3; } double[] kurtosisArray = {1, 2, 3, 4, 10}; double kurtosisValue = calculateKurtosis(kurtosisArray);", "Arguments": "kurtosisArray"},
    {"Preceding Code": "public static boolean isSmithNumber(int num) { int sumDigits = sumOfDigits(num); int sumPrimeFactors = 0; int temp = num; for (int i = 2; i <= temp; i++) { while (temp % i == 0) { sumPrimeFactors += sumOfDigits(i); temp /= i; } } return sumDigits == sumPrimeFactors; } int smithNumber = 22; boolean isSmith = isSmithNumber(smithNumber);", "Arguments": "smithNumber"},
    {"Preceding Code": "public static String abbreviateName(String fullName) { String[] names = fullName.split(\" \"); if (names.length < 2) return fullName; return names[0] + \" \" + names[names.length - 1].charAt(0) + \".\"; } String personFullName = \"John Doe Smith\"; String abbreviatedName = abbreviateName(personFullName);", "Arguments": "personFullName"},
    {"Preceding Code": "public static int findMaxDifference(int[] arr) { int maxDiff = 0; for (int i = 0; i < arr.length; i++) { for (int j = i + 1; j < arr.length; j++) { int diff = Math.abs(arr[i] - arr[j]); if (diff > maxDiff) maxDiff = diff; } } return maxDiff; } int[] diffArray = {1, 10, 5, 15}; int maxDifference = findMaxDifference(diffArray);", "Arguments": "diffArray"},
    {"Preceding Code": "public static double calculateCoefficientOfVariation(double[] arr) { double stdDev = calculateStandardDeviation(arr); double mean = java.util.Arrays.stream(arr).average().orElse(Double.NaN); return (stdDev / mean) * 100; } double[] cvArray = {1, 2, 3, 4, 5}; double cvValue = calculateCoefficientOfVariation(cvArray);", "Arguments": "cvArray"},
    {"Preceding Code": "public static boolean isNivenNumber(int num) { return num % sumOfDigits(num) == 0; } int nivenNumber = 126; boolean isNiven = isNivenNumber(nivenNumber);", "Arguments": "nivenNumber"},
    {"Preceding Code": "public static String extractUniqueCharacters(String str) { java.util.LinkedHashSet<Character> set = new java.util.LinkedHashSet<>(); for (char ch : str.toCharArray()) { set.add(ch); } StringBuilder result = new StringBuilder(); for (char ch : set) { result.append(ch); } return result.toString(); } String stringUniqueCharsExtract = \"aabbcc\"; String uniqueCharsExtract = extractUniqueCharacters(stringUniqueCharsExtract);", "Arguments": "stringUniqueCharsExtract"},
    {"Preceding Code": "public static int findClosestSum(int[] arr, int target) { int closestSum = arr[0] + arr[1] + arr[2]; java.util.Arrays.sort(arr); for (int i = 0; i < arr.length - 2; i++) { int left = i + 1, right = arr.length - 1; while (left < right) { int sum = arr[i] + arr[left] + arr[right]; if (Math.abs(sum - target) < Math.abs(closestSum - target)) closestSum = sum; if (sum < target) left++; else right--; } } return closestSum; } int[] closestSumArray = {-1, 2, 1, -4}; int closestTarget = 1; int closestSumValue = findClosestSum(closestSumArray, closestTarget);", "Arguments": "closestSumArray, closestTarget"},
    {"Preceding Code": "public static double calculateGeometricMeanOfSquares(double[] arr) { double product = 1; for (double num : arr) { product *= num * num; } return Math.pow(product, 1.0 / arr.length); } double[] gmSquaresArray = {2, 3, 4}; double gmSquaresValue = calculateGeometricMeanOfSquares(gmSquaresArray);", "Arguments": "gmSquaresArray"},
    {"Preceding Code": "public static String findFirstNonRepeatingSubstring(String str, int length) { for (int i = 0; i <= str.length() - length; i++) { String sub = str.substring(i, i + length); if (isUnique(sub)) return sub; } return null; } public static boolean isUnique(String str) { java.util.Set<Character> set = new java.util.HashSet<>(); for (char ch : str.toCharArray()) { if (!set.add(ch)) return false; } return true; } String stringNonRepeatingSub = \"abcabcde\"; int subLengthNonRepeating = 3; String nonRepeatingSubstring = findFirstNonRepeatingSubstring(stringNonRepeatingSub, subLengthNonRepeating);", "Arguments": "stringNonRepeatingSub, subLengthNonRepeating"},
    {"Preceding Code": "public static int findMaxProductSubarray(int[] arr) { int maxProduct = arr[0], currentMax = arr[0], currentMin = arr[0]; for (int i = 1; i < arr.length; i++) { if (arr[i] < 0) { int temp = currentMax; currentMax = currentMin; currentMin = temp; } currentMax = Math.max(arr[i], currentMax * arr[i]); currentMin = Math.min(arr[i], currentMin * arr[i]); maxProduct = Math.max(maxProduct, currentMax); } return maxProduct; } int[] productSubarray = {2, 3, -2, 4}; int maxProductValue = findMaxProductSubarray(productSubarray);", "Arguments": "productSubarray"},
    {"Preceding Code": "public static double calculateCovariance(double[] arr1, double[] arr2) { if (arr1.length != arr2.length) return Double.NaN; double mean1 = java.util.Arrays.stream(arr1).average().orElse(Double.NaN); double mean2 = java.util.Arrays.stream(arr2).average().orElse(Double.NaN); double sum = 0; for (int i = 0; i < arr1.length; i++) { sum += (arr1[i] - mean1) * (arr2[i] - mean2); } return sum / (arr1.length - 1); } double[] covarianceArray1 = {1, 2, 3, 4, 5}; double[] covarianceArray2 = {5, 4, 3, 2, 1}; double covarianceValue = calculateCovariance(covarianceArray1, covarianceArray2);", "Arguments": "covarianceArray1, covarianceArray2"},
    {"Preceding Code": "public static boolean isLychrelNumber(int num, int iterations) { long temp = num; for (int i = 0; i < iterations; i++) { temp += reverseNumber(temp); if (isPalindrome(String.valueOf(temp))) return false; } return true; } public static long reverseNumber(long num) { return Long.parseLong(new StringBuilder(String.valueOf(num)).reverse().toString()); } int lychrelNumber = 196; int lychrelIterations = 50; boolean isLychrel = isLychrelNumber(lychrelNumber, lychrelIterations);", "Arguments": "lychrelNumber, lychrelIterations"},
    {"Preceding Code": "public static String findLongestCommonPrefix(String[] strs) { if (strs == null || strs.length == 0) return \"\"; String prefix = strs[0]; for (int i = 1; i < strs.length; i++) { while (strs[i].indexOf(prefix) != 0) { prefix = prefix.substring(0, prefix.length() - 1); if (prefix.isEmpty()) return \"\"; } } return prefix; } String[] prefixArray = {\"flower\", \"flow\", \"flight\"}; String commonPrefix = findLongestCommonPrefix(prefixArray);", "Arguments": "prefixArray"},
    {"Preceding Code": "public static int findMaxSumSubarray(int[] arr) { int maxSoFar = arr[0], maxEndingHere = arr[0]; for (int i = 1; i < arr.length; i++) { maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]); maxSoFar = Math.max(maxSoFar, maxEndingHere); } return maxSoFar; } int[] maxSumArray = {-2, 1, -3, 4, -1, 2, 1, -5, 4}; int maxSumValue = findMaxSumSubarray(maxSumArray);", "Arguments": "maxSumArray"},
    {"Preceding Code": "public static double calculateCorrelationCoefficient(double[] arr1, double[] arr2) { double covariance = calculateCovariance(arr1, arr2); double stdDev1 = calculateStandardDeviation(arr1); double stdDev2 = calculateStandardDeviation(arr2); return covariance / (stdDev1 * stdDev2); } double[] correlationArray1 = {1, 2, 3, 4, 5}; double[] correlationArray2 = {5, 4, 3, 2, 1}; double correlationValue = calculateCorrelationCoefficient(correlationArray1, correlationArray2);", "Arguments": "correlationArray1, correlationArray2"},
    {"Preceding Code": "public static boolean isDisariumNumber(int num) { String str = String.valueOf(num); int sum = 0; for (int i = 0; i < str.length(); i++) { sum += Math.pow(Character.getNumericValue(str.charAt(i)), i + 1); } return sum == num; } int disariumNumber = 135; boolean isDisarium = isDisariumNumber(disariumNumber);", "Arguments": "disariumNumber"},
    {"Preceding Code": "public static String findLongestPalindromeSubstring(String str) { if (str == null || str.isEmpty()) return \"\"; int start = 0, end = 0; for (int i = 0; i < str.length(); i++) { for (int j = i; j < str.length(); j++) { String sub = str.substring(i, j + 1); if (isPalindrome(sub) && sub.length() > end - start + 1) { start = i; end = j; } } } return str.substring(start, end + 1); } String stringPalindromeSub = \"babad\"; String longestPalindrome = findLongestPalindromeSubstring(stringPalindromeSub);", "Arguments": "stringPalindromeSub"},
    {"Preceding Code": "public static int findMaxSumIncreasingSubsequence(int[] arr) { int[] maxSum = arr.clone(); int max = arr[0]; for (int i = 1; i < arr.length; i++) { for (int j = 0; j < i; j++) { if (arr[i] > arr[j] && maxSum[i] < maxSum[j] + arr[i]) { maxSum[i] = maxSum[j] + arr[i]; } } max = Math.max(max, maxSum[i]); } return max; } int[] increasingSubsequence = {1, 101, 2, 3, 100, 4, 5}; int maxSumIncreasing = findMaxSumIncreasingSubsequence(increasingSubsequence);", "Arguments": "increasingSubsequence"},
    {"Preceding Code": "public static double calculateWeightedMean(double[] arr, double[] weights) { if (arr.length != weights.length) return Double.NaN; double sum = 0, weightSum = 0; for (int i = 0; i < arr.length; i++) { sum += arr[i] * weights[i]; weightSum += weights[i]; } return sum / weightSum; } double[] weightedArray = {1, 2, 3, 4, 5}; double[] weightsArray = {1, 2, 3, 4, 5}; double weightedMean = calculateWeightedMean(weightedArray, weightsArray);", "Arguments": "weightedArray, weightsArray"},
    {"Preceding Code": "public static boolean isSpyNumber(int num) { String str = String.valueOf(num); int sum = 0, product = 1; for (char ch : str.toCharArray()) { int digit = Character.getNumericValue(ch); sum += digit; product *= digit; } return sum == product; } int spyNumber = 1124; boolean isSpy = isSpyNumber(spyNumber);", "Arguments": "spyNumber"},
    {"Preceding Code": "public static int findMaxSumCircularSubarray(int[] arr) { int maxKadane = kadane(arr); int totalSum = 0; for (int i = 0; i < arr.length; i++) { totalSum += arr[i]; arr[i] = -arr[i]; } int maxCircular = totalSum + kadane(arr); return Math.max(maxKadane, maxCircular); } public static int kadane(int[] arr) { int maxSoFar = arr[0], maxEndingHere = arr[0]; for (int i = 1; i < arr.length; i++) { maxEndingHere = Math.max(arr[i], maxEndingHere + arr[i]); maxSoFar = Math.max(maxSoFar, maxEndingHere); } return maxSoFar; } int[] circularArray = {1, -2, 3, -2}; int maxSumCircular = findMaxSumCircularSubarray(circularArray);", "Arguments": "circularArray"},
    {"Preceding Code": "public static double calculateRootMeanSquareError(double[] actual, double[] predicted) { if (actual.length != predicted.length) return Double.NaN; double sum = 0; for (int i = 0; i < actual.length; i++) { sum += Math.pow(actual[i] - predicted[i], 2); } return Math.sqrt(sum / actual.length); } double[] actualArray = {1, 2, 3, 4, 5}; double[] predictedArray = {1.1, 2.2, 3.1, 4.2, 5.3}; double rmseValue = calculateRootMeanSquareError(actualArray, predictedArray);", "Arguments": "actualArray, predictedArray"},
    {"Preceding Code": "public static boolean isJugglerNumber(int num, int iterations) { long temp = num; for (int i = 0; i < iterations; i++) { if (temp % 2 == 0) { temp = (long) Math.floor(Math.sqrt(temp)); } else { temp = (long) Math.floor(Math.pow(temp, 1.5)); } if (temp == 1) return true; } return false; } int jugglerNumber = 3; int jugglerIterations = 20; boolean isJuggler = isJugglerNumber(jugglerNumber, jugglerIterations);", "Arguments": "jugglerNumber, jugglerIterations"},
    {"Preceding Code": "public static String findShortestCommonSupersequence(String str1, String str2) { int[][] dp = new int[str1.length() + 1][str2.length() + 1]; for (int i = 1; i <= str1.length(); i++) { dp[i][0] = i; } for (int j = 1; j <= str2.length(); j++) { dp[0][j] = j; } for (int i = 1; i <= str1.length(); i++) { for (int j = 1; j <= str2.length(); j++) { if (str1.charAt(i - 1) == str2.charAt(j - 1)) { dp[i][j] = dp[i - 1][j - 1] + 1; } else { dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + 1; } } } StringBuilder result = new StringBuilder(); int i = str1.length(), j = str2.length(); while (i > 0 || j > 0) { if (i > 0 && j > 0 && str1.charAt(i - 1) == str2.charAt(j - 1)) { result.append(str1.charAt(i - 1)); i--; j--; } else if (i > 0 && (j == 0 || dp[i - 1][j] <= dp[i][j - 1])) { result.append(str1.charAt(i - 1)); i--; } else { result.append(str2.charAt(j - 1)); j--; } } return result.reverse().toString(); } String stringSuper1 = \"AGGTAB\", stringSuper2 = \"GXTXAYB\"; String shortestSuper = find    ShortestCommonSupersequence(stringSuper1, stringSuper2);", "Arguments": "stringSuper1, stringSuper2"},
    {"Preceding Code": "public static int findMaxSumPathInMatrix(int[][] matrix) { int[][] dp = new int[matrix.length][matrix[0].length]; dp[0][0] = matrix[0][0]; for (int i = 1; i < matrix.length; i++) { dp[i][0] = dp[i - 1][0] + matrix[i][0]; } for (int j = 1; j < matrix[0].length; j++) { dp[0][j] = dp[0][j - 1] + matrix[0][j]; } for (int i = 1; i < matrix.length; i++) { for (int j = 1; j < matrix[0].length; j++) { dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]; } } return dp[matrix.length - 1][matrix[0].length - 1]; } int[][] maxSumMatrix = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}; int maxSumPath = findMaxSumPathInMatrix(maxSumMatrix);", "Arguments": "maxSumMatrix"},
    {"Preceding Code": "public static double calculateMeanAbsoluteError(double[] actual, double[] predicted) { if (actual.length != predicted.length) return Double.NaN; double sum = 0; for (int i = 0; i < actual.length; i++) { sum += Math.abs(actual[i] - predicted[i]); } return sum / actual.length; } double[] actualMae = {1, 2, 3, 4, 5}; double[] predictedMae = {1.1, 2.2, 3.1, 4.2, 5.3}; double maeValue = calculateMeanAbsoluteError(actualMae, predictedMae);", "Arguments": "actualMae, predictedMae"},
    {"Preceding Code": "public static boolean isUglyNumber(int num) { if (num <= 0) return false; int[] factors = {2, 3, 5}; for (int factor : factors) { while (num % factor == 0) num /= factor; } return num == 1; } int uglyNumber = 8; boolean isUgly = isUglyNumber(uglyNumber);", "Arguments": "uglyNumber"},
    {"Preceding Code": "public static String findLongestCommonSubstring(String str1, String str2) { int[][] dp = new int[str1.length() + 1][str2.length() + 1]; int maxLength = 0, endIndex = 0; for (int i = 1; i <= str1.length(); i++) { for (int j = 1; j <= str2.length(); j++) { if (str1.charAt(i - 1) == str2.charAt(j - 1)) { dp[i][j] = dp[i - 1][j - 1] + 1; if (dp[i][j] > maxLength) { maxLength = dp[i][j]; endIndex = i; } } else { dp[i][j] = 0; } } } return str1.substring(endIndex - maxLength, endIndex); } String stringSub1 = \"ABCDGH\", stringSub2 = \"ACDGHR\"; String longestSub = findLongestCommonSubstring(stringSub1, stringSub2);", "Arguments": "stringSub1, stringSub2"},
    {"Preceding Code": "public static int findMaxSumSubmatrix(int[][] matrix) { int rows = matrix.length, cols = matrix[0].length; int maxSum = Integer.MIN_VALUE; for (int left = 0; left < cols; left++) { int[] temp = new int[rows]; for (int right = left; right < cols; right++) { for (int i = 0; i < rows; i++) { temp[i] += matrix[i][right]; } maxSum = Math.max(maxSum, kadane(temp)); } } return maxSum; } int[][] maxSumSubMatrix = {{1, 2, -1, -4, -20}, {-8, -3, 4, 2, 1}, {3, 8, 10, 1, 3}, {-4, -1, 1, 7, -6}}; int maxSumSub = findMaxSumSubmatrix(maxSumSubMatrix);", "Arguments": "maxSumSubMatrix"},
    {"Preceding Code": "public static double calculateMeanSquaredError(double[] actual, double[] predicted) { if (actual.length != predicted.length) return Double.NaN; double sum = 0; for (int i = 0; i < actual.length; i++) { sum += Math.pow(actual[i] - predicted[i], 2); } return sum / actual.length; } double[] actualMse = {1, 2, 3, 4, 5}; double[] predictedMse = {1.1, 2.2, 3.1, 4.2, 5.3}; double mseValue = calculateMeanSquaredError(actualMse, predictedMse);", "Arguments": "actualMse, predictedMse"},
    {"Preceding Code": "public static boolean isHappyPrime(int num, int iterations) { if (!isPrime(num)) return false; int temp = num; java.util.Set<Integer> seen = new java.util.HashSet<>(); for (int i = 0; i < iterations; i++) { int sum = 0; while (temp > 0) { int digit = temp % 10; sum += digit * digit; temp /= 10; } if (sum == 1) return true; if (seen.contains(sum)) return false; seen.add(sum); temp = sum; } return false; } int happyPrimeNumber = 7; int happyPrimeIterations = 20; boolean isHappyPrimeNumber = isHappyPrime(happyPrimeNumber, happyPrimeIterations);", "Arguments": "happyPrimeNumber, happyPrimeIterations"},
    {"Preceding Code": "public static String findShortestPalindrome(String str) { int i = 0, j = str.length() - 1; while (j >= 0) { if (str.charAt(i) == str.charAt(j)) i++; j--; } if (i == str.length()) return str; String suffix = str.substring(i); String prefix = new StringBuilder(suffix).reverse().toString(); String mid = findShortestPalindrome(str.substring(0, i)); return prefix + mid + suffix; } String stringShortestPalindrome = \"aacecaaa\"; String shortestPalindrome = findShortestPalindrome(stringShortestPalindrome);", "Arguments": "stringShortestPalindrome"},
    {"Preceding Code": "public static int findMaxSumRectangle(int[][] matrix) { int rows = matrix.length, cols = matrix[0].length; int maxSum = Integer.MIN_VALUE; for (int left = 0; left < cols; left++) { int[] temp = new int[rows]; for (int right = left; right < cols; right++) { for (int i = 0; i < rows; i++) { temp[i] += matrix[i][right]; } maxSum = Math.max(maxSum, kadane(temp)); } } return maxSum; } int[][] maxSumRectangleMatrix = {{1, 2, -1, -4, -20}, {-8, -3, 4, 2, 1}, {3, 8, 10, 1, 3}, {-4, -1, 1, 7, -6}}; int maxSumRectangle = findMaxSumRectangle(maxSumRectangleMatrix);", "Arguments": "maxSumRectangleMatrix"},
    {"Preceding Code": "public static double calculateR2Score(double[] actual, double[] predicted) { if (actual.length != predicted.length) return Double.NaN; double meanActual = java.util.Arrays.stream(actual).average().orElse(Double.NaN); double ssTotal = 0, ssResidual = 0; for (int i = 0; i < actual.length; i++) { ssTotal += Math.pow(actual[i] - meanActual, 2); ssResidual += Math.pow(actual[i] - predicted[i], 2); } return 1 - (ssResidual / ssTotal); } double[] actualR2 = {1, 2, 3, 4, 5}; double[] predictedR2 = {1.1, 2.2, 3.1, 4.2, 5.3}; double r2Value = calculateR2Score(actualR2, predictedR2);", "Arguments": "actualR2, predictedR2"},
    {"Preceding Code": "public static boolean isEmirpNumber(int num) { if (!isPrime(num)) return false; int reversed = Integer.parseInt(new StringBuilder(String.valueOf(num)).reverse().toString()); return isPrime(reversed) && num != reversed; } int emirpNumber = 13; boolean isEmirp = isEmirpNumber(emirpNumber);", "Arguments": "emirpNumber"},
    {"Preceding Code": "public static String findLongestRepeatingCharacterReplacement(String str, int k) { int[] charCount = new int[26]; int maxLength = 0, maxCount = 0, start = 0; for (int end = 0; end < str.length(); end++) { charCount[str.charAt(end) - 'A']++; maxCount = Math.max(maxCount, charCount[str.charAt(end) - 'A']); if (end - start + 1 - maxCount > k) { charCount[str.charAt(start) - 'A']--; start++; } maxLength = Math.max(maxLength, end - start + 1); } return str.substring(start, start + maxLength); } String stringRepeatReplace = \"ABAB\"; int replaceK = 2; String longestRepeatReplace = findLongestRepeatingCharacterReplacement(stringRepeatReplace, replaceK);", "Arguments": "stringRepeatReplace, replaceK"},
    {"Preceding Code": "public static int findMaxSumOfNonAdjacentElements(int[] arr) { if (arr.length == 0) return 0; if (arr.length == 1) return arr[0]; int[] dp = new int[arr.length]; dp[0] = arr[0]; dp[1] = Math.max(arr[0], arr[1]); for (int i = 2; i < arr.length; i++) { dp[i] = Math.max(dp[i - 1], dp[i - 2] + arr[i]); } return dp[arr.length - 1]; } int[] nonAdjacentArray = {5, 5, 10, 100, 10, 5}; int maxSumNonAdjacent = findMaxSumOfNonAdjacentElements(nonAdjacentArray);", "Arguments": "nonAdjacentArray"},
    {"Preceding Code": "public static double calculateAdjustedR2Score(double[] actual, double[] predicted, int features) { double r2 = calculateR2Score(actual, predicted); int n = actual.length; return 1 - ((1 - r2) * (n - 1) / (n - features - 1)); } double[] actualAdjR2 = {1, 2, 3, 4, 5}; double[] predictedAdjR2 = {1.1, 2.2, 3.1, 4.2, 5.3}; int featureCount = 2; double adjR2Value = calculateAdjustedR2Score(actualAdjR2, predictedAdjR2, featureCount);", "Arguments": "actualAdjR2, predictedAdjR2, featureCount"},
    {"Preceding Code": "public static boolean isTwistedPrime(int num) { if (!isPrime(num)) return false; int reversed = Integer.parseInt(new StringBuilder(String.valueOf(num)).reverse().toString()); return isPrime(reversed); } int twistedPrimeNumber = 97; boolean isTwistedPrime = isTwistedPrime(twistedPrimeNumber);", "Arguments": "twistedPrimeNumber"},
    {"Preceding Code": "public static String findLongestSubstringWithoutRepeatingCharacters(String str) { int start = 0, end = 0, maxLength = 0; java.util.Set<Character> seen = new java.util.HashSet<>(); while (end < str.length()) { if (seen.add(str.charAt(end))) { maxLength = Math.max(maxLength, end - start + 1); end++; } else { seen.remove(str.charAt(start)); start++; } } return str.substring(start, start + maxLength); } String stringNoRepeat = \"abcabcbb\"; String longestNoRepeat = findLongestSubstringWithoutRepeatingCharacters(stringNoRepeat);", "Arguments": "stringNoRepeat"},
    {"Preceding Code": "public static double calculateExplainedVarianceScore(double[] actual, double[] predicted) { if (actual.length != predicted.length) return Double.NaN; double meanActual = java.util.Arrays.stream(actual).average().orElse(Double.NaN); double varianceActual = 0, varianceResidual = 0; for (int i = 0; i < actual.length; i++) { varianceActual += Math.pow(actual[i] - meanActual, 2); varianceResidual += Math.pow(actual[i] - predicted[i], 2); } return 1 - (varianceResidual / varianceActual); } double[] actualEvs = {1, 2, 3, 4, 5}; double[] predictedEvs = {1.1, 2.2, 3.1, 4.2, 5.3}; double evsValue = calculateExplainedVarianceScore(actualEvs, predictedEvs);", "Arguments": "actualEvs, predictedEvs"},
    {"Preceding Code": "public static boolean isStronglyPrime(int num) { if (!isPrime(num)) return false; int prevPrime = findPreviousPrime(num); int nextPrime = findNextPrime(num); return num > (prevPrime + nextPrime) / 2; } public static int findPreviousPrime(int num) { for (int i = num - 1; i >= 2; i--) { if (isPrime(i)) return i; } return 2; } public static int findNextPrime(int num) { for (int i = num + 1; ; i++) { if (isPrime(i)) return i; } } int stronglyPrimeNumber = 17; boolean isStronglyPrimeNumber = isStronglyPrime(stronglyPrimeNumber);", "Arguments": "stronglyPrimeNumber"},
    {"Preceding Code": "public static String findLongestSubstringWithAtMostKDistinctCharacters(String str, int k) { int start = 0, end = 0, maxLength = 0; java.util.Map<Character, Integer> charCount = new java.util.HashMap<>(); while (end < str.length()) { charCount.put(str.charAt(end), charCount.getOrDefault(str.charAt(end), 0) + 1); while (charCount.size() > k) { charCount.put(str.charAt(start), charCount.get(str.charAt(start)) - 1); if (charCount.get(str.charAt(start)) == 0) charCount.remove(str.charAt(start)); start++; } if (end - start + 1 > maxLength) maxLength = end - start + 1; end++; } return str.substring(start, start + maxLength); } String stringDistinctK = \"eceba\"; int distinctK = 2; String longestDistinctK = findLongestSubstringWithAtMostKDistinctCharacters(stringDistinctK, distinctK);", "Arguments": "stringDistinctK, distinctK"},
    {"Preceding Code": "public static int findMaxSumOfSubarrayWithAtMostKElements(int[] arr, int k) { int maxSum = 0, windowSum = 0, start = 0; for (int end = 0; end < arr.length; end++) { windowSum += arr[end]; while (end - start + 1 > k) { windowSum -= arr[start]; start++; } maxSum = Math.max(maxSum, windowSum); } return maxSum; } int[] subArrayAtMostK = {1, 2, 3, 4, 5}; int atMostK = 3; int maxSumAtMostK = findMaxSumOfSubarrayWithAtMostKElements(subArrayAtMostK, atMostK);", "Arguments": "subArrayAtMostK, atMostK"},
    {"Preceding Code": "public static double calculateMedianAbsoluteDeviation(double[] arr) { java.util.Arrays.sort(arr); double median = calculateMedian(arr); double[] deviations = new double[arr.length]; for (int i = 0; i < arr.length; i++) { deviations[i] = Math.abs(arr[i] - median); } return calculateMedian(deviations); } double[] madArray = {1, 2, 3, 4, 5}; double madValue = calculateMedianAbsoluteDeviation(madArray);", "Arguments": "madArray"},
    {"Preceding Code": "public static boolean isBalancedPrime(int num) { if (!isPrime(num)) return false; int prevPrime = findPreviousPrime(num); int nextPrime = findNextPrime(num); return num == (prevPrime + nextPrime) / 2; } int balancedPrimeNumber = 53; boolean isBalancedPrimeNumber = isBalancedPrime(balancedPrimeNumber);", "Arguments": "balancedPrimeNumber"},
    {"Preceding Code": "public static String findShortestWindowSubstring(String str, String pattern) { if (pattern.length() > str.length()) return \"\"; java.util.Map<Character, Integer> patternCount = new java.util.HashMap<>(); for (char ch : pattern.toCharArray()) { patternCount.put(ch, patternCount.getOrDefault(ch, 0) + 1); } int start = 0, end = 0, minLength = Integer.MAX_VALUE, minStart = 0, count = 0; java.util.Map<Character, Integer> windowCount = new java.util.HashMap<>(); while (end < str.length()) { char currentChar = str.charAt(end); windowCount.put(currentChar, windowCount.getOrDefault(currentChar, 0) + 1); if (patternCount.containsKey(currentChar) && windowCount.get(currentChar) <= patternCount.get(currentChar)) count++; while (count == pattern.length()) { if (end - start + 1 < minLength) { minLength = end - start + 1; minStart = start; } char startChar = str.charAt(start); windowCount.put(startChar, windowCount.get(startChar) - 1); if (patternCount.containsKey(startChar) && windowCount.get(start    Char) < patternCount.get(startChar)) count--; start++; } end++; } return minLength == Integer.MAX_VALUE ? \"\" : str.substring(minStart, minStart + minLength); } String stringWindow = \"ADOBECODEBANC\"; String patternWindow = \"ABC\"; String shortestWindow = findShortestWindowSubstring(stringWindow, patternWindow);", "Arguments": "stringWindow, patternWindow"},
    {"Preceding Code": "public static int findMaxSumOfSubrectangleWithAtMostKElements(int[][] matrix, int k) { int rows = matrix.length, cols = matrix[0].length; int maxSum = Integer.MIN_VALUE; for (int left = 0; left < cols; left++) { int[] temp = new int[rows]; for (int right = left; right < cols; right++) { for (int i = 0; i < rows; i++) { temp[i] += matrix[i][right]; } maxSum = Math.max(maxSum, maxSumOfSubarrayWithAtMostKElements(temp, k)); } } return maxSum; } public static int maxSumOfSubarrayWithAtMostKElements(int[] arr, int k) { int maxSum = Integer.MIN_VALUE, windowSum = 0, start = 0; for (int end = 0; end < arr.length; end++) { windowSum += arr[end]; while (end - start + 1 > k) { windowSum -= arr[start]; start++; } if (windowSum > maxSum) maxSum = windowSum; } return maxSum; } int[][] subRectangleK = {{1, 0, 1}, {0, -2, 3}}; int rectangleK = 2; int maxSumRectangleK = findMaxSumOfSubrectangleWithAtMostKElements(subRectangleK, rectangleK);", "Arguments": "subRectangleK, rectangleK"},
    {"Preceding Code": "public static double calculateGeometricStandardDeviation(double[] arr) { double gm = calculateGeometricMean(arr); double sum = 0; for (double num : arr) { sum += Math.pow(Math.log(num) - Math.log(gm), 2); } return Math.exp(Math.sqrt(sum / arr.length)); } double[] gsdArray = {1, 2, 4, 8}; double gsdValue = calculateGeometricStandardDeviation(gsdArray);", "Arguments": "gsdArray"},
    {"Preceding Code": "public static boolean isCircularPrime(int num) { if (!isPrime(num)) return false; String str = String.valueOf(num); for (int i = 0; i < str.length(); i++) { str = str.substring(1) + str.charAt(0); if (!isPrime(Integer.parseInt(str))) return false; } return true; } int circularPrimeNumber = 197; boolean isCircularPrimeNumber = isCircularPrime(circularPrimeNumber);", "Arguments": "circularPrimeNumber"},
    {"Preceding Code": "public static String findLongestAbsoluteFilePath(String input) { Stringpaths = input.split(\"\\n\"); int maxLength = 0; java.util.Stack<Integer> stack = new java.util.Stack<>(); stack.push(0); for (String path : paths) { int level = path.lastIndexOf(\"\\t\") + 1; int length = path.substring(level).length(); while (level < stack.size() - 1) { stack.pop(); } stack.push(stack.peek() + length + 1); if (path.contains(\".\")) { maxLength = Math.max(maxLength, stack.peek() - 1); } } return String.valueOf(maxLength); } String filePathInput = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"; String longestPath = findLongestAbsoluteFilePath(filePathInput);", "Arguments": "filePathInput"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceLessThanK(intarr, int k) { java.util.Arrays.sort(arr); intdp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { if (arr[i] - arr[j] < k) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } intsubsequenceK = {1, 2, 3, 4, 5}; int differenceK = 2; int maxSumSubsequenceK = findMaxSumOfSubsequenceWithDifferenceLessThanK(subsequenceK, differenceK);", "Arguments": "subsequenceK, differenceK"},
    {"Preceding Code": "public static double calculateGiniCoefficient(doublearr) { java.util.Arrays.sort(arr); double sum = 0; for (int i = 0; i < arr.length; i++) { for (int j = 0; j < arr.length; j++) { sum += Math.abs(arr[i] - arr[j]); } } double mean = java.util.Arrays.stream(arr).average().orElse(Double.NaN); return sum / (2 * arr.length * arr.length * mean); } doubleginiArray = {1, 2, 3, 4, 5}; double giniValue = calculateGiniCoefficient(giniArray);", "Arguments": "giniArray"},
    {"Preceding Code": "public static boolean isAlternatingPrime(int num) { if (num < 2) return false; String str = String.valueOf(num); for (int i = 0; i < str.length(); i++) { int digit = Character.getNumericValue(str.charAt(i)); if (i % 2 == 0 && digit % 2 == 0) return false; if (i % 2 != 0 && digit % 2 != 1) return false; } return isPrime(num); } int alternatingPrimeNumber = 295681; boolean isAlternatingPrimeNumber = isAlternatingPrime(alternatingPrimeNumber);", "Arguments": "alternatingPrimeNumber"},
    {"Preceding Code": "public static String findLongestPalindromicSubsequence(String str) { intdp = new int[str.length()][str.length()]; for (int i = str.length() - 1; i >= 0; i--) { dp[i][i] = 1; for (int j = i + 1; j < str.length(); j++) { if (str.charAt(i) == str.charAt(j)) { dp[i][j] = dp[i + 1][j - 1] + 2; } else { dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]); } } } return String.valueOf(dp[0][str.length() - 1]); } String stringPalindromeSequence = \"bbbab\"; String longestPalindromeSequence = findLongestPalindromicSubsequence(stringPalindromeSequence);", "Arguments": "stringPalindromeSequence"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithGap(intarr) { intdp = new int[arr.length]; dp[0] = arr[0]; dp[1] = Math.max(arr[0], arr[1]); for (int i = 2; i < arr.length; i++) { dp[i] = Math.max(dp[i - 1], dp[i - 2] + arr[i]); } return dp[arr.length - 1]; } intsubsequenceGap = {1, 2, 3, 4, 5}; int maxSumSubsequenceGap = findMaxSumOfSubsequenceWithGap(subsequenceGap);", "Arguments": "subsequenceGap"},
    {"Preceding Code": "public static double calculateInformationGain(doubleparent, doublechildren) { double parentEntropy = calculateEntropy(parent); double childrenEntropy = 0; for (doublechild : children) { double weight = (double) child.length / parent.length; childrenEntropy += weight * calculateEntropy(child); } return parentEntropy - childrenEntropy; } public static double calculateEntropy(doublearr) { double entropy = 0; java.util.Map<Double, Integer> count = new java.util.HashMap<>(); for (double num : arr) { count.put(num, count.getOrDefault(num, 0) + 1); } for (double key : count.keySet()) { double p = (double) count.get(key) / arr.length; entropy -= p * Math.log(p) / Math.log(2); } return entropy; } doubleparentArray = {1, 1, 0, 0, 1, 0}; doublechildrenArray = {{1, 1, 0}, {0, 1, 0}}; double informationGainValue = calculateInformationGain(parentArray, childrenArray);", "Arguments": "parentArray, childrenArray"},
    {"Preceding Code": "public static boolean isPrimeFactorSumPrime(int num) { if (num <= 1) return false; int sum = 0; int temp = num; for (int i = 2; i <= temp; i++) { while (temp % i == 0) { sum += i; temp /= i; } } return isPrime(sum); } int primeFactorSumPrimeNumber = 24; boolean isPrimeFactorSumPrimeNumber = isPrimeFactorSumPrime(primeFactorSumPrimeNumber);", "Arguments": "primeFactorSumPrimeNumber"},
    {"Preceding Code": "public static String findLongestCommonSubsequence(String str1, String str2) { intdp = new int[str1.length() + 1][str2.length() + 1]; for (int i = 1; i <= str1.length(); i++) { for (int j = 1; j <= str2.length(); j++) { if (str1.charAt(i - 1) == str2.charAt(j - 1)) { dp[i][j] = dp[i - 1][j - 1] + 1; } else { dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); } } } int i = str1.length(), j = str2.length(); StringBuilder result = new StringBuilder(); while (i > 0 && j > 0) { if (str1.charAt(i - 1) == str2.charAt(j - 1)) { result.append(str1.charAt(i - 1)); i--; j--; } else if (dp[i - 1][j] > dp[i][j - 1]) { i--; } else { j--; } } return result.reverse().toString(); } String stringSequence1 = \"AGGTAB\", stringSequence2 = \"GXTXAYB\"; String longestCommonSequence = findLongestCommonSubsequence(stringSequence1, stringSequence2);", "Arguments": "stringSequence1, stringSequence2"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithAlternatingSigns(intarr) { int positiveSum = 0, negativeSum = 0; for (int num : arr) { if (num > 0) { positiveSum = Math.max(positiveSum, negativeSum + num); } else { negativeSum = Math.max(negativeSum, positiveSum + num); } } return Math.max(positiveSum, negativeSum); } intsubsequenceSigns = {1, -2, 3, -4, 5}; int maxSumSubsequenceSigns = findMaxSumOfSubsequenceWithAlternatingSigns(subsequenceSigns);", "Arguments": "subsequenceSigns"},
    {"Preceding Code": "public static double calculateJensenShannonDivergence(doublep, doubleq) { if (p.length != q.length) return Double.NaN; double m= new double[p.length]; for (int i = 0; i < p.length; i++) { m[i] = (p[i] + q[i]) / 2; } double js = 0; js += calculateKLDivergence(p, m); js += calculateKLDivergence(q, m); return js / 2; } public static double calculateKLDivergence(doublep, doubleq) { if (p.length != q.length) return Double.NaN; double kl = 0; for (int i = 0; i < p.length; i++) { if (p[i] != 0 && q[i] != 0) { kl += p[i] * Math.log(p[i] / q[i]) / Math.log(2); } } return kl; } doublepArray = {0.4, 0.6}; doubleqArray = {0.5, 0.5}; double jsdValue = calculateJensenShannonDivergence(pArray, qArray);", "Arguments": "pArray, qArray"},
    {"Preceding Code": "public static boolean isTwistedCompositeNumber(int num) { if (num <= 1) return false; if (isPrime(num)) return false; int reversed = Integer.parseInt(new StringBuilder(String.valueOf(num)).reverse().toString()); return !isPrime(reversed); } int twistedCompositeNumber = 16; boolean isTwistedCompositeNumber = isTwistedCompositeNumber(twistedCompositeNumber);", "Arguments": "twistedCompositeNumber"},
    {"Preceding Code": "public static String findLongestIncreasingPathInMatrix(intmatrix) { if (matrix == null || matrix.length == 0) return \"0\"; int rows = matrix.length, cols = matrix[0].length; intdp = new int[rows][cols]; int maxLength = 0; for (int i = 0; i < rows; i++) { for (int j = 0; j < cols; j++) { maxLength = Math.max(maxLength, dfs(matrix, dp, i, j)); } } return String.valueOf(maxLength); } public static int dfs(intmatrix, intdp, int i, int j) { if (dp[i][j] != 0) return dp[i][j]; int max = 1; intdirections = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}}; for (intdir : directions) { int x = i + dir[0], y = j + dir[1]; if (x >= 0 && x < matrix.length && y >= 0 && y < matrix[0].length && matrix[x][y] > matrix[i][j]) { max = Math.max(max, 1 + dfs(matrix, dp, x, y)); } } dp[i][j] = max; return max; } intincreasingPathMatrix = {{9, 9, 4}, {6, 6, 8}, {2, 1, 1}}; String longestIncreasingPath = findLongestIncreasingPathInMatrix(increasingPathMatrix);", "Arguments": "increasingPathMatrix"},
    {"Preceding Code": "public static int findMaxSumOfSubmatrixWithGivenArea(intmatrix, int area) { int rows = matrix.length, cols = matrix[0].length; int maxSum = Integer.MIN_VALUE; for (int r1 = 0; r1 < rows; r1++) { for (int c1 = 0; c1 < cols; c1++) { for (int r2 = r1; r2 < rows; r2++) { for (int c2 = c1; c2 < cols; c2++) { if ((r2 - r1 + 1) * (c2 - c1 + 1) == area) { int sum = 0; for (int r = r1; r <= r2; r++) { for (int c = c1; c <= c2; c++) { sum += matrix[r][c]; } } maxSum = Math.max(maxSum, sum); } } } } } return maxSum; } intsubMatrixArea = {{1, 0, 1}, {0, -2, 3}}; int givenArea = 2; int maxSumSubMatrixArea = findMaxSumOfSubmatrixWithGivenArea(subMatrixArea, givenArea);", "Arguments": "subMatrixArea, givenArea"},
    {"Preceding Code": "public static double calculateHellingerDistance(doublep, doubleq) { if (p.length != q.length) return Double.NaN; double sum = 0; for (int i = 0; i < p.length; i++) { sum += Math.pow(Math.sqrt(p[i]) - Math.sqrt(q[i]), 2); } return Math.sqrt(sum) / Math.sqrt(2); } doublepHellinger = {0.4, 0.6}; doubleqHellinger = {0.5, 0.5}; double hellingerValue = calculateHellingerDistance(pHellinger, qHellinger);", "Arguments": "pHellinger, qHellinger"},
    {"Preceding Code": "public static boolean isAlmostPrime(int num) { if (num <= 3) return false; int count = 0; int temp = num; for (int i = 2; i <= temp; i++) { if (temp % i == 0) { count++; while (temp % i == 0) temp /= i; } if (count > 2) return false; } return count == 2; } int almostPrimeNumber = 14; boolean isAlmostPrimeNumber = isAlmostPrime(almostPrimeNumber);", "Arguments": "almostPrimeNumber"},
    {"Preceding Code": "public static String findLongestCommonSubsequenceLength(String str1, String str2) { intdp = new int[str1.length() + 1][str2.length() + 1]; for (int i = 1; i <= str1.length(); i++) { for (int j = 1; j <= str2.length(); j++) { if (str1.charAt(i - 1) == str2.charAt(j - 1)) { dp[i][j] = dp[i - 1][j - 1] + 1; } else { dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); } } } return String.valueOf(dp[str1.length()][str2.length()]); } String stringLength1 = \"AGGTAB\", String length2 = \"GXTXAYB\"; String longestCommonLength = findLongestCommonSubsequenceLength(stringLength1, String length2);", "Arguments": "stringLength1, String length2"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceAtMostK(intarr, int k) { java.util.Arrays.sort(arr); intdp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { if (arr[i] - arr[j] <= k) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } intsubsequenceAtMostK = {1, 2, 3, 4, 5}; int atMostKDiff = 2; int maxSumSubsequenceAtMostK = findMaxSumOfSubsequenceWithDifferenceAtMostK(subsequenceAtMostK, atMostKDiff);", "Arguments": "subsequenceAtMostK, atMostKDiff"},
    {"Preceding Code": "public static double calculateKullbackLeiblerDivergence(doublep, doubleq) { if (p.length != q.length) return Double.NaN; double kl = 0; for (int i = 0; i < p.length; i++) { if (p[i] != 0 && q[i] != 0) { kl += p[i] * Math.log(p[i] / q[i]) / Math.log(2); } } return kl; } doublepKLDivergence = {0.4, 0.6}; doubleqKLDivergence = {0.5, 0.5}; double klDivergenceValue = calculateKullbackLeiblerDivergence(pKLDivergence, qKLDivergence);", "Arguments": "pKLDivergence, qKLDivergence"},
    {"Preceding Code": "public static boolean isTruncatablePrime(int num) { if (!isPrime(num)) return false; String str = String.valueOf(num); for (int i = 1; i < str.length(); i++) { if (!isPrime(Integer.parseInt(str.substring(i)))) return false; if (!isPrime(Integer.parseInt(str.substring(0, str.length() - i)))) return false; } return true; } int truncatablePrimeNumber = 3797; boolean isTruncatablePrimeNumber = isTruncatablePrime(truncatablePrimeNumber);", "Arguments": "truncatablePrimeNumber"},
    {"Preceding Code": "public static String findLongestIncreasingSubsequenceLength(intarr) { inttails = new int[arr.length]; int size = 0; for (int num : arr) { int i = 0, j = size; while (i != j) { int mid = (i + j) / 2; if (tails[mid] < num) i = mid + 1; else j = mid; } tails[i] = num; if (i == size) size++; } return String.valueOf(size); } intincreasingSequence = {10, 9, 2, 5, 3, 7, 101, 18}; String longestIncreasingLength = findLongestIncreasingSubsequenceLength(increasingSequence);", "Arguments": "increasingSequence"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceGreaterThanK(intarr, int k) { java.util.Arrays.sort(arr); intdp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { if (arr[i] - arr[j] > k) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } intsubsequenceGreaterThanK = {1, 2, 3, 4, 5}; int greaterThanK = 2; int maxSumSubsequenceGreaterThanK = findMaxSumOfSubsequenceWithDifferenceGreaterThanK(subsequenceGreaterThanK, greaterThanK);", "Arguments": "subsequenceGreaterThanK, greaterThanK"},
    {"Preceding Code": "public static double calculateBhattacharyyaDistance(doublep, doubleq) { if (p.length != q.length) return Double.NaN; double sum = 0; for (int i = 0; i < p.length; i++) { sum += Math.sqrt(p[i] * q[i]); } return -Math.log(sum); } doublepBhattacharyya = {0.4, 0.6}; doubleqBhattacharyya = {0.5, 0.5}; double bhattacharyyaValue = calculateBhattacharyyaDistance(pBhattacharyya, qBhattacharyya);", "Arguments": "pBhattacharyya, qBhattacharyya"},
    {"Preceding Code": "public static boolean isPandigitalNumber(int num) { String str = String.valueOf(num); java.util.Set<Character> set = new java.util.HashSet<>(); for (char ch : str.toCharArray()) { if (ch < '0' || ch > '9' || ch == '0') return false; set.add(ch); } return set.size() == str.length() && set.size() == 9; } int pandigitalNumber = 123456789; boolean isPandigitalNumber = isPandigitalNumber(pandigitalNumber);", "Arguments": "pandigitalNumber"},
    {"Preceding Code": "public static String findLongestCommonSubsequenceString(String str1, String str2) { intdp = new int[str1.length() + 1][str2.length() + 1]; for (int i = 1; i <= str1.length(); i++) { for (int j = 1; j <= str2.length(); j++) { if (str1.charAt(i - 1) == str2.charAt(j - 1)) { dp[i][j] = dp[i - 1][j - 1] + 1; } else { dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); } } } int i = str1.length(), j = str2.length(); StringBuilder result = new StringBuilder(); while (i > 0 && j > 0) { if (str1.charAt(i - 1) == str2.charAt(j - 1)) { result.append(str1.charAt(i - 1)); i--; j--; } else if (dp[i - 1][j] > dp[i][j - 1]) { i--; } else { j--; } } return result.reverse().toString(); } String stringSequenceString1 = \"AGGTAB\", stringSequenceString2 = \"GXTXAYB\"; String longestCommonSequenceString = findLongestCommonSubsequenceString(stringSequenceString1, stringSequenceString2);", "Arguments": "stringSequenceString1, stringSequenceString2"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceInARange(intarr, int lower, int upper) { java.util.Arrays.sort(arr); intdp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { if (arr[i] - arr[j] >= lower && arr[i] - arr[j] <= upper) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } intsubsequenceRange = {1, 2, 3, 4, 5}; int lowerRange = 1, upperRange = 2; int maxSumSubsequenceRange = findMaxSumOfSubsequenceWithDifferenceInARange(subsequenceRange, lowerRange, upperRange);", "Arguments": "subsequenceRange, lowerRange, upperRange"},
    {"Preceding Code": "public static double calculateCrossEntropy(doubleactual, doublepredicted) { if (actual.length != predicted.length) return Double.NaN; double crossEntropy = 0; for (int i = 0; i < actual.length; i++) { if (actual[i] != 0 && predicted[i] != 0) { crossEntropy -= actual[i] * Math.log(predicted[i]) / Math.log(2); } } return crossEntropy; } doubleactualCrossEntropy = {0.4, 0.6}; doublepredictedCrossEntropy = {0.5, 0.5}; double crossEntropyValue = calculateCrossEntropy(actualCrossEntropy, predictedCrossEntropy);", "Arguments": "actualCrossEntropy, predictedCrossEntropy"},
    {"Preceding Code": "public static boolean isCarolPrime(int num) { if (num <= 3) return false; int n = 0; while (Math.pow(2, n) - 1 <= Math.sqrt(num + 1)) { if (Math.pow(2, n) - 1 == Math.sqrt(num + 1)) { long carol = (long) Math.pow(2, 2 * n) - Math.pow(2, n + 1) - 1; if (carol == num && isPrime(num)) return true; } n++; } return false; } int carolPrimeNumber = 17; boolean isCarolPrimeNumber = isCarolPrime(carolPrimeNumber);", "Arguments": "carolPrimeNumber"},
    {"Preceding Code": "public static String findLongestCommonSubstringLength(String str1, String str2) { intdp = new int[str1.length() + 1][str2.length() + 1]; int maxLength = 0; for (int i = 1; i <= str1.length(); i++) { for (int j = 1; j <= str2.length(); j++) { if (str1.charAt(i - 1) == str2.charAt(j - 1)) { dp[i][j] = dp[i - 1][j - 1] + 1; maxLength = Math.max(maxLength, dp[i][j]); } else { dp[i][j] = 0; } } } return String.valueOf(maxLength); } String stringSubstring1 = \"ABCDGH\", String substring2 = \"ACDGHR\"; String longestSubstringLength = findLongestCommonSubstringLength(stringSubstring1, String substring2);", "Arguments": "stringSubstring1, String substring2"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceLessThanOrEqualToK(intarr, int k) { java.util.Arrays.sort(arr); intdp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { if (arr[i] - arr[j] <= k) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } intsubsequenceLessEqualK = {1, 2, 3, 4, 5}; int lessEqualK = 2; int maxSumSubsequenceLessEqualK = findMaxSumOfSubsequenceWithDifferenceLessThanOrEqualToK(subsequenceLessEqualK, lessEqualK);", "Arguments": "subsequenceLessEqualK, lessEqualK"},
    {"Preceding Code": "public static double calculateKolmogorovSmirnovStatistic(doublearr1, doublearr2) { java.util.Arrays.sort(arr1); java.util.Arrays.sort(arr2); int i = 0, j = 0, n1 = arr1.length, n2 = arr2.length; double maxDiff = 0, currentDiff = 0; while (i < n1 && j < n2) { if (arr1[i] <= arr2[j]) { currentDiff = Math.max(currentDiff, Math.abs((double) i / n1 - (double) j / n2)); i++; } else { currentDiff = Math.max(currentDiff, Math.abs((double) i / n1 - (double) j / n2)); j++; } } while (i < n1) { currentDiff = Math.max(currentDiff, Math.abs((double) i / n1 - (double) j / n2)); i++; } while (j < n2) { currentDiff = Math.max(currentDiff, Math.abs((double) i / n1 - (double) j / n2)); j++; } return currentDiff; } doublearrKS1 = {1.1, 1.2, 1.3, 1.4, 1.5}; doublearrKS2 = {1.0, 1.1, 1.2, 1.3, 1.4}; double ksStatisticValue = calculateKolmogorovSmirnovStatistic(arrKS1, arrKS2);", "Arguments": "arrKS1, arrKS2"},
    {"Preceding Code": "public static boolean isSophieGermainPrime(int num) { if (!isPrime(num)) return false; return isPrime(2 * num + 1); } int sophieGermainPrimeNumber = 2; boolean isSophieGermainPrimeNumber = isSophieGermainPrime(sophieGermainPrimeNumber);", "Arguments": "sophieGermainPrimeNumber"},
    {"Preceding Code": "public static String findLongestCommonSubstringString(String str1, String str2) { intdp = new int[str1.length() + 1][str2.length() + 1]; int maxLength = 0, endIndex = 0; for (int i = 1; i <= str1.length(); i++) { for (int j = 1; j <= str2.length(); j++) { if (str1.charAt(i - 1) == str2.charAt(j - 1)) { dp[i][j] = dp[i - 1][j - 1] + 1; if (dp[i][j] > maxLength) { maxLength = dp[i][j]; endIndex = i; } } else { dp[i][j] = 0; } } } return str1.substring(endIndex - maxLength, endIndex); } String stringSubstringString1 = \"ABCDGH\", String substringString2 = \"ACDGHR\"; String longestSubstringString = findLongestCommonSubstringString(stringSubstringString1, stringSubstringString2);", "Arguments": "stringSubstringString1, String substringString2"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceGreaterThanOrEqualToK(intarr, int k) { java.util.Arrays.sort(arr); intdp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { if (arr[i] - arr[j] >= k) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } intsubsequenceGreaterEqualK = {1, 2, 3, 4, 5}; int greaterEqualK = 2; int maxSumSubsequenceGreaterEqualK = findMaxSumOfSubsequenceWithDifferenceGreaterThanOrEqualToK(subsequenceGreaterEqualK, greaterEqualK);", "Arguments": "subsequenceGreaterEqualK, greaterEqualK"},
    {"Preceding Code": "public static double calculateWassersteinDistance(doublearr1, doublearr2) { if (arr1.length != arr2.length) return Double.NaN; double sum = 0; double cdf1 = 0, cdf2 = 0; int i = 0, j = 0; while (i < arr1.length && j < arr2.length) { double val1 = arr1[i], val2 = arr2[j]; if (val1 <= val2) { cdf1 += val1; i++; } if (val2 <= val1) { cdf2 += val2; j++; } sum += Math.abs(cdf1 - cdf2); } return sum; } doublearrWasserstein1 = {1.1, 1.2, 1.3, 1.4, 1.5}; doublearrWasserstein2 = {1.0, 1.1, 1.2, 1.3, 1.4}; double wassersteinValue = calculateWassersteinDistance(arrWasserstein1, arrWasserstein2);", "Arguments": "arrWasserstein1, arrWasserstein2"},
    {"Preceding Code": "public static boolean isWilsonPrime(int num) { if (num <= 1) return false; if (num == 5 || num == 13 || num == 563) return true; return false; } int wilsonPrimeNumber = 5; boolean isWilsonPrimeNumber = isWilsonPrime(wilsonPrimeNumber);", "Arguments": "wilsonPrimeNumber"},
    {"Preceding Code": "public static String findLongestRepeatingSubsequenceLength(String str) { int n = str.length(); int[][] dp = new int[n + 1][n + 1]; for (int i = 1; i <= n; i++) { for (int j = 1; j <= n; j++) { if (str.charAt(i - 1) == str.charAt(j - 1) && i != j) { dp[i][j] = dp[i - 1][j - 1] + 1; } else { dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); } } } return String.valueOf(dp[n][n]); } String repeatingSequenceLength = \"AABEBCDD\"; String longestRepeatingLength = findLongestRepeatingSubsequenceLength(repeatingSequenceLength);", "Arguments": "repeatingSequenceLength"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceEqualToK(int[] arr, int k) { java.util.Arrays.sort(arr); int[] dp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { if (arr[i] - arr[j] == k) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } int[] subsequenceEqualToK = {1, 2, 3, 4, 5}; int equalToK = 2; int maxSumSubsequenceEqualToK = findMaxSumOfSubsequenceWithDifferenceEqualToK(subsequenceEqualToK, equalToK);", "Arguments": "subsequenceEqualToK, equalToK"},
    {"Preceding Code": "public static double calculateTotalVariationDistance(double[] p, double[] q) { if (p.length != q.length) return Double.NaN; double sum = 0; for (int i = 0; i < p.length; i++) { sum += Math.abs(p[i] - q[i]); } return sum / 2; } double[] pTotalVariation = {0.4, 0.6}; double[] qTotalVariation = {0.5, 0.5}; double totalVariationValue = calculateTotalVariationDistance(pTotalVariation, qTotalVariation);", "Arguments": "pTotalVariation, qTotalVariation"},
    {"Preceding Code": "public static boolean isLeylandNumber(int num) { if (num <= 1) return false; for (int x = 2; x <= Math.sqrt(num); x++) { for (int y = 2; Math.pow(x, y) <= num; y++) { if (Math.pow(x, y) + Math.pow(y, x) == num) return true; } } return false; } int leylandNumber = 17; boolean isLeylandNumberValue = isLeylandNumber(leylandNumber);", "Arguments": "leylandNumber"},
    {"Preceding Code": "public static String findLongestRepeatingSubsequenceString(String str) { int n = str.length(); int[][] dp = new int[n + 1][n + 1]; for (int i = 1; i <= n; i++) { for (int j = 1; j <= n; j++) { if (str.charAt(i - 1) == str.charAt(j - 1) && i != j) { dp[i][j] = dp[i - 1][j - 1] + 1; } else { dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); } } } StringBuilder result = new StringBuilder(); int i = n, j = n; while (i > 0 && j > 0) { if (dp[i][j] == dp[i - 1][j - 1] + 1) { result.append(str.charAt(i - 1)); i--; j--; } else if (dp[i][j] == dp[i - 1][j]) { i--; } else { j--; } } return result.reverse().toString(); } String repeatingSequenceString = \"AABEBCDD\"; String longestRepeatingString = findLongestRepeatingSubsequenceString(repeatingSequenceString);", "Arguments": "repeatingSequenceString"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceInAGivenSet(int[] arr, int[] diffSet) { java.util.Arrays.sort(arr); int[] dp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { for (int diff : diffSet) { if (arr[i] - arr[j] == diff) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } int[] subsequenceGivenSet = {1, 2, 3, 4, 5}; int[] givenDiffSet = {1, 2}; int maxSumSubsequenceGivenSet = findMaxSumOfSubsequenceWithDifferenceInAGivenSet(subsequenceGivenSet, givenDiffSet);", "Arguments": "subsequenceGivenSet, givenDiffSet"},
    {"Preceding Code": "public static double calculateChiSquaredDistance(double[] p, double[] q) { if (p.length != q.length) return Double.NaN; double sum = 0; for (int i = 0; i < p.length; i++) { if (p[i] + q[i] != 0) { sum += Math.pow(p[i] - q[i], 2) / (p[i] + q[i]); } } return sum; } double[] pChiSquared = {0.4, 0.6}; double[] qChiSquared = {0.5, 0.5}; double chiSquaredValue = calculateChiSquaredDistance(pChiSquared, qChiSquared);", "Arguments": "pChiSquared, qChiSquared"},
    {"Preceding Code": "public static boolean isCullenNumber(int num) { if (num <= 1) return false; int n = 1; while (Math.pow(2, n) * n + 1 <= num) { if (Math.pow(2, n) * n + 1 == num) return true; n++; } return false; } int cullenNumber = 141; boolean isCullenNumberValue = isCullenNumber(cullenNumber);", "Arguments": "cullenNumber"},
    {"Preceding Code": "public static double multiply(double a, double b) { return a * b; } double m = 2.5, n = 4.0; double product = multiply(m, n);", "Arguments": "m, n"},
    {"Preceding Code": "public static int add(int x, int y) { return x + y; } int a = 5, b = 10; int sum = add(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String concatenate(String str1, String str2) { return str1 + str2; } String first = \"Hello\", second = \"World\"; String result = concatenate(first, second);", "Arguments": "first, second"},
    {"Preceding Code": "public static boolean isEven(int num) { return num % 2 == 0; } int number = 7; boolean even = isEven(number);", "Arguments": "number"},
    {"Preceding Code": "public static double divide(double a, double b) { return a / b; } double x = 10.0, y = 2.0; double quotient = divide(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static int max(int a, int b) { return (a > b) ? a : b; } int val1 = 12, val2 = 8; int maximum = max(val1, val2);", "Arguments": "val1, val2"},
    {"Preceding Code": "public static boolean containsChar(String str, char c) { return str.indexOf(c) != -1; } String word = \"apple\"; char letter = 'p'; boolean found = containsChar(word, letter);", "Arguments": "word, letter"},
    {"Preceding Code": "public static int square(int num) { return num * num; } int value = 6; int squaredValue = square(value);", "Arguments": "value"},
    {"Preceding Code": "public static double areaOfCircle(double radius) { return Math.PI * radius * radius; } double r = 3.5; double area = areaOfCircle(r);", "Arguments": "r"},
    {"Preceding Code": "public static int countWords(String sentence) { return sentence.split(\" \").length; } String text = \"This is a test\"; int wordCount = countWords(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isPositive(int number) { return number > 0; } int num = -3; boolean positive = isPositive(num);", "Arguments": "num"},
    {"Preceding Code": "public static String reverseString(String str) { return new StringBuilder(str).reverse().toString(); } String input = \"hello\"; String reversed = reverseString(input);", "Arguments": "input"},
    {"Preceding Code": "public static double power(double base, double exponent) { return Math.pow(base, exponent); } double b = 2.0, e = 3.0; double result = power(b, e);", "Arguments": "b, e"},
    {"Preceding Code": "public static int factorial(int n) { return (n == 0) ? 1 : n * factorial(n - 1); } int num = 4; int fact = factorial(num);", "Arguments": "num"},
    {"Preceding Code": "public static boolean isPalindrome(String str) { String rev = new StringBuilder(str).reverse().toString(); return str.equals(rev); } String phrase = \"racecar\"; boolean palindrome = isPalindrome(phrase);", "Arguments": "phrase"},
    {"Preceding Code": "public static double hypotenuse(double a, double b) { return Math.sqrt(a * a + b * b); } double side1 = 3.0, side2 = 4.0; double hyp = hypotenuse(side1, side2);", "Arguments": "side1, side2"},
    {"Preceding Code": "public static int absoluteValue(int n) { return (n < 0) ? -n : n; } int val = -9; int absVal = absoluteValue(val);", "Arguments": "val"},
    {"Preceding Code": "public static boolean isVowel(char c) { return \"aeiouAEIOU\".indexOf(c) != -1; } char ch = 'e'; boolean vowel = isVowel(ch);", "Arguments": "ch"},
    {"Preceding Code": "public static String formatCurrency(double amount) { return String.format(\"$%.2f\", amount); } double price = 12.5; String formatted = formatCurrency(price);", "Arguments": "price"},
    {"Preceding Code": "public static int[] sortArray(int[] arr) { Arrays.sort(arr); return arr; } int[] numbers = {4, 2, 9, 1}; int[] sorted = sortArray(numbers);", "Arguments": "numbers"},
    {"Preceding Code": "public static int subtract(int x, int y) { return x - y; } int c = 15, d = 5; int difference = subtract(c, d);", "Arguments": "c, d"},
    {"Preceding Code": "public static boolean isPositive(int number) { return number > 0; } int value = -3; boolean positive = isPositive(value);", "Arguments": "value"},
    {"Preceding Code": "public static String combineStrings(String s1, String s2, String s3) { return s1 + s2 + s3; } String part1 = \"Hello\", part2 = \" \", part3 = \"there\"; String combined = combineStrings(part1, part2, part3);", "Arguments": "part1, part2, part3"},
    {"Preceding Code": "public static double circleArea(double radius) { return Math.PI * radius * radius; } double r = 3.0; double area = circleArea(r);", "Arguments": "r"},
    {"Preceding Code": "public static boolean isEmpty(String str) { return str.isEmpty(); } String text = \"\"; boolean empty = isEmpty(text);", "Arguments": "text"},
    {"Preceding Code": "public static double power(double base, int exponent) { return Math.pow(base, exponent); } double b = 2.5; int e = 3; double result = power(b, e);", "Arguments": "b, e"},
    {"Preceding Code": "public static String printStatus(boolean flag, String name) { return flag ? name + \" is valid\" : name + \" is invalid\"; } boolean isValid = true; String userName = \"Alice\"; String status = printStatus(isValid, userName);", "Arguments": "isValid, userName"},
    {"Preceding Code": "public static int factorial(int n) { if(n <= 1) return 1; return n * factorial(n-1); } int num = 5; int fact = factorial(num);", "Arguments": "num"},
    {"Preceding Code": "public static String reverse(String s) { return new StringBuilder(s).reverse().toString(); } String input = \"test\"; String reversed = reverse(input);", "Arguments": "input"},
    {"Preceding Code": "public static boolean isDivisible(int num, int divisor) { return num % divisor == 0; } int n = 10, d = 5; boolean divisible = isDivisible(n, d);", "Arguments": "n, d"},
    {"Preceding Code": "public static double calculateBMI(double weight, double height) { return weight / (height * height); } double w = 70.5, h = 1.75; double bmi = calculateBMI(w, h);", "Arguments": "w, h"},
    {"Preceding Code": "public static int countVowels(String str) { int count = 0; for(char c : str.toLowerCase().toCharArray()) if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') count++; return count; } String text = \"hello\"; int vowels = countVowels(text);", "Arguments": "text"},
    {"Preceding Code": "public static int sumArray(int[] arr) { int sum = 0; for(int num : arr) sum += num; return sum; } int[] numbers = {1, 2, 3}; int total = sumArray(numbers);", "Arguments": "numbers"},
    {"Preceding Code": "public static String toUpperCase(String s) { return s.toUpperCase(); } String lower = \"lower\"; String upper = toUpperCase(lower);", "Arguments": "lower"},
    {"Preceding Code": "public static int multiplyByTwo(int num) { return num * 2; } int value = 5; int doubled = multiplyByTwo(value);", "Arguments": "value"},
    {"Preceding Code": "public static boolean isPrime(int number) { if(number <= 1) return false; for(int i = 2; i <= Math.sqrt(number); i++) if(number % i == 0) return false; return true; } int num = 17; boolean prime = isPrime(num);", "Arguments": "num"},
    {"Preceding Code": "public static String addExclamation(String s) { return s + \"!\"; } String greeting = \"Hi\"; String excited = addExclamation(greeting);", "Arguments": "greeting"},
    {"Preceding Code": "public static int max(int a, int b) { return a > b ? a : b; } int x = 10, y = 20; int maximum = max(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static String getInitials(String firstName, String lastName) { return firstName.charAt(0) + \".\" + lastName.charAt(0) + \".\"; } String first = \"John\", last = \"Doe\"; String initials = getInitials(first, last);", "Arguments": "first, last"},
    {"Preceding Code": "public static boolean areEqual(int a, int b) { return a == b; } int x = 5, y = 5; boolean equal = areEqual(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static double hypotenuse(double a, double b) { return Math.sqrt(a*a + b*b); } double side1 = 3.0, side2 = 4.0; double hypo = hypotenuse(side1, side2);", "Arguments": "side1, side2"},
    {"Preceding Code": "public static String capitalize(String s) { return s.substring(0,1).toUpperCase() + s.substring(1); } String word = \"apple\"; String capitalized = capitalize(word);", "Arguments": "word"},
    {"Preceding Code": "public static boolean isPalindrome(String s) { String reversed = new StringBuilder(s).reverse().toString(); return s.equals(reversed); } String str = \"madam\"; boolean palindrome = isPalindrome(str);", "Arguments": "str"},
    {"Preceding Code": "public static int sumThree(int a, int b, int c) { return a + b + c; } int num1 = 1, num2 = 2, num3 = 3; int total = sumThree(num1, num2, num3);", "Arguments": "num1, num2, num3"},
    {"Preceding Code": "public static double discount(double price, double rate) { return price * (1 - rate); } double originalPrice = 100.0, discountRate = 0.2; double finalPrice = discount(originalPrice, discountRate);", "Arguments": "originalPrice, discountRate"},
    {"Preceding Code": "public static boolean isMultiple(int num, int factor) { return num % factor == 0; } int number = 15, factor = 5; boolean multiple = isMultiple(number, factor);", "Arguments": "number, factor"},
    {"Preceding Code": "public static int absoluteValue(int n) { return Math.abs(n); } int value = -10; int abs = absoluteValue(value);", "Arguments": "value"},
    {"Preceding Code": "public static String removeSpaces(String s) { return s.replace(\" \", \"\"); } String sentence = \"Hello World\"; String noSpaces = removeSpaces(sentence);", "Arguments": "sentence"},
    {"Preceding Code": "public static int findMax(int[] arr) { int max = arr[0]; for(int num : arr) if(num > max) max = num; return max; } int[] numbers = {3, 5, 2}; int maxNumber = findMax(numbers);", "Arguments": "numbers"},
    {"Preceding Code": "public static double averageArray(double[] arr) { double sum = 0; for(double num : arr) sum += num; return sum / arr.length; } double[] values = {1.5, 2.5, 3.5}; double avg = averageArray(values);", "Arguments": "values"},
    {"Preceding Code": "public static boolean isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0; } int y = 2020; boolean leap = isLeapYear(y);", "Arguments": "y"},
    {"Preceding Code": "public static double rectangleArea(double length, double width) { return length * width; } double l = 5.0, w = 3.0; double area = rectangleArea(l, w);", "Arguments": "l, w"},
    {"Preceding Code": "public static boolean logicalAnd(boolean a, boolean b) { return a && b; } boolean flag1 = true, flag2 = false; boolean result = logicalAnd(flag1, flag2);", "Arguments": "flag1, flag2"},
    {"Preceding Code": "public static int stringToInt(String s) { return Integer.parseInt(s); } String input = \"123\"; int num = stringToInt(input);", "Arguments": "input"},
    {"Preceding Code": "public static int cube(int x) { return x * x * x; } int num = 3; int cubed = cube(num);", "Arguments": "num"},
    {"Preceding Code": "public static double celsiusToFahrenheit(double celsius) { return (celsius * 9/5) + 32; } double tempC = 25.0; double tempF = celsiusToFahrenheit(tempC);", "Arguments": "tempC"},
    {"Preceding Code": "public static boolean isUpperCase(String s) { return s.equals(s.toUpperCase()); } String str = \"HELLO\"; boolean upper = isUpperCase(str);", "Arguments": "str"},
    {"Preceding Code": "public static int stringLength(String s) { return s.length(); } String name = \"Alice\"; int length = stringLength(name);", "Arguments": "name"},
    {"Preceding Code": "public static int subtractFrom100(int a) { return 100 - a; } int value = 30; int result = subtractFrom100(value);", "Arguments": "value"},
    {"Preceding Code": "public static String encrypt(String s, int shift) { StringBuilder encrypted = new StringBuilder(); for(char c : s.toCharArray()) encrypted.append((char)(c + shift)); return encrypted.toString(); } String message = \"abc\"; int shift = 3; String encryptedMsg = encrypt(message, shift);", "Arguments": "message, shift"},
    {"Preceding Code": "public static boolean isSquare(int num) { int sqrt = (int) Math.sqrt(num); return sqrt * sqrt == num; } int number = 16; boolean square = isSquare(number);", "Arguments": "number"},
    {"Preceding Code": "public static int countWords(String s) { return s.split(\"\\\\s+\").length; } String sentence = \"The quick brown fox\"; int wordCount = countWords(sentence);", "Arguments": "sentence"},
    {"Preceding Code": "public static int findMin(int a, int b, int c) { return Math.min(a, Math.min(b, c)); } int x = 10, y = 5, z = 3; int min = findMin(x, y, z);", "Arguments": "x, y, z"},
    {"Preceding Code": "public static String replaceSpaces(String s, char replacement) { return s.replace(' ', replacement); } String text = \"Hello World\"; char repl = '-'; String replaced = replaceSpaces(text, repl);", "Arguments": "text, repl"},
    {"Preceding Code": "public static boolean startsWithA(String s) { return s.startsWith(\"A\"); } String str = \"Apple\"; boolean starts = startsWithA(str);", "Arguments": "str"},
    {"Preceding Code": "public static int countChar(String s, char c) { int count = 0; for(int i = 0; i < s.length(); i++) if(s.charAt(i) == c) count++; return count; } String input = \"banana\"; char target = 'a'; int cnt = countChar(input, target);", "Arguments": "input, target"},
    {"Preceding Code": "public static double computeInterest(double principal, double rate, int years) { return principal * Math.pow(1 + rate, years); } double p = 1000.0, r = 0.05; int t = 10; double interest = computeInterest(p, r, t);", "Arguments": "p, r, t"},
    {"Preceding Code": "public static boolean isVowel(char c) { return \"AEIOUaeiou\".indexOf(c) != -1; } char letter = 'e'; boolean vowel = isVowel(letter);", "Arguments": "letter"},
    {"Preceding Code": "public static boolean isNegative(int num) { return num < 0; } int value = -5; boolean negative = isNegative(value);", "Arguments": "value"},
    {"Preceding Code": "public static int product(int a, int b, int c) { return a * b * c; } int i = 2, j = 3, k = 4; int prod = product(i, j, k);", "Arguments": "i, j, k"},
    {"Preceding Code": "public static String boolToString(boolean b) { return b ? \"true\" : \"false\"; } boolean flag = true; String strFlag = boolToString(flag);", "Arguments": "flag"},
    {"Preceding Code": "public static double perimeter(double length, double width) { return 2 * (length + width); } double len = 5.0, wid = 3.0; double peri = perimeter(len, wid);", "Arguments": "len, wid"},
    {"Preceding Code": "public static boolean containsSubstring(String main, String sub) { return main.contains(sub); } String mainStr = \"hello world\", subStr = \"world\"; boolean contains = containsSubstring(mainStr, subStr);", "Arguments": "mainStr, subStr"},
    {"Preceding Code": "public static double minutesToHours(int minutes) { return minutes / 60.0; } int mins = 120; double hours = minutesToHours(mins);", "Arguments": "mins"},
    {"Preceding Code": "public static boolean inRange(int num, int min, int max) { return num >= min && num <= max; } int n = 5, lower = 1, upper = 10; boolean within = inRange(n, lower, upper);", "Arguments": "n, lower, upper"},
    {"Preceding Code": "public static double sqrt(double num) { return Math.sqrt(num); } double value = 25.0; double root = sqrt(value);", "Arguments": "value"},
    {"Preceding Code": "public static boolean isNumeric(String s) { try { Double.parseDouble(s); return true; } catch (NumberFormatException e) { return false; } } String input = \"123.45\"; boolean numeric = isNumeric(input);", "Arguments": "input"},
    {"Preceding Code": "public static int daysInMonth(int month, int year) { if(month == 2) return isLeapYear(year) ? 29 : 28; if(month == 4 || month == 6 || month == 9 || month == 11) return 30; return 31; } int m = 2, yr = 2020; int days = daysInMonth(m, yr);", "Arguments": "m, yr"},
    {"Preceding Code": "public static String listToString(List<String> list) { return String.join(\", \", list); } List<String> fruits = Arrays.asList(\"Apple\", \"Banana\"); String strList = listToString(fruits);", "Arguments": "fruits"},
    {"Preceding Code": "public static double circleCircumference(double radius) { return 2 * Math.PI * radius; } double r = 4.0; double circumference = circleCircumference(r);", "Arguments": "r"},
    {"Preceding Code": "public static double divide(double a, double b) { return a / b; } double numerator = 10.0, denominator = 2.0; double quotient = divide(numerator, denominator);", "Arguments": "numerator, denominator"},
    {"Preceding Code": "public static int countDigits(String s) { int count = 0; for(char c : s.toCharArray()) if(Character.isDigit(c)) count++; return count; } String str = \"abc123\"; int digits = countDigits(str);", "Arguments": "str"},
    {"Preceding Code": "public static boolean endsWith(String s, String suffix) { return s.endsWith(suffix); } String text = \"example.txt\"; String suffix = \".txt\"; boolean ends = endsWith(text, suffix);", "Arguments": "text, suffix"},
    {"Preceding Code": "public static int gcd(int a, int b) { if(b == 0) return a; return gcd(b, a % b); } int x = 54, y = 24; int gcdResult = gcd(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static String trimWhitespace(String s) { return s.trim(); } String input = \"   text   \"; String trimmed = trimWhitespace(input);", "Arguments": "input"},
    {"Preceding Code": "public static int sumOfSquares(int a, int b) { return a*a + b*b; } int numA = 3, numB = 4; int sumSq = sumOfSquares(numA, numB);", "Arguments": "numA, numB"},
    {"Preceding Code": "public static boolean isTriangle(int a, int b, int c) { return (a + b > c) && (a + c > b) && (b + c > a); } int sideA = 3, sideB = 4, sideC = 5; boolean triangle = isTriangle(sideA, sideB, sideC);", "Arguments": "sideA, sideB, sideC"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceInAGivenRangeAndSet(int[] arr, int lower, int upper, int[] diffSet) { java.util.Arrays.sort(arr); int[] dp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { for (int diff : diffSet) { if (arr[i] - arr[j] >= lower && arr[i] - arr[j] <= upper && arr[i] - arr[j] == diff) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } int[] subsequenceRangeSet = {1, 2, 3, 4, 5}; int lowerRangeSet = 1, upperRangeSet = 2; int[] diffSetRangeSet = {1}; int maxSumSubsequenceRangeSet = findMaxSumOfSubsequenceWithDifferenceInAGivenRangeAndSet(subsequenceRangeSet, lowerRangeSet, upperRangeSet, diffSetRangeSet);", "Arguments": "subsequenceRangeSet, lowerRangeSet, upperRangeSet, diffSetRangeSet"},
    {"Preceding Code": "public static double calculateHellingerDistanceSquared(double[] p, double[] q) { if (p.length != q.length) return Double.NaN; double sum = 0; for (int i = 0; i < p.length; i++) { sum += Math.pow(Math.sqrt(p[i]) - Math.sqrt(q[i]), 2); } return sum / 2; } double[] pHellingerSquared = {0.4, 0.6}; double[] qHellingerSquared = {0.5, 0.5}; double hellingerSquaredValue = calculateHellingerDistanceSquared(pHellingerSquared, qHellingerSquared);", "Arguments": "pHellingerSquared, qHellingerSquared"},
    {"Preceding Code": "public static boolean isKyneaNumber(int num) { if (num <= 3) return false; int n = 0; while (Math.pow(2, 2 * n) + 1 <= num) { if (Math.pow(2, 2 * n) + 1 == num) return true; n++; } return false; } int kyneaNumber = 17; boolean isKyneaNumberValue = isKyneaNumber(kyneaNumber);", "Arguments": "kyneaNumber"},
    {"Preceding Code": "public static int findMaxSumOfSubsequenceWithDifferenceInAGivenSetAndModulo(int[] arr, int[] diffSet, int modulo) { java.util.Arrays.sort(arr); int[] dp = new int[arr.length]; dp[0] = arr[0]; int maxSum = arr[0]; for (int i = 1; i < arr.length; i++) { dp[i] = arr[i]; for (int j = 0; j < i; j++) { for (int diff : diffSet) { if ((arr[i] - arr[j]) % modulo == diff) { dp[i] = Math.max(dp[i], dp[j] + arr[i]); } } } maxSum = Math.max(maxSum, dp[i]); } return maxSum; } int[] subsequenceSetModulo = {1, 2, 3, 4, 5}; int[] diffSetModulo = {1}; int moduloValue = 2; int maxSumSubsequenceSetModulo = findMaxSumOfSubsequenceWithDifferenceInAGivenSetAndModulo(subsequenceSetModulo, diffSetModulo, moduloValue);", "Arguments": "subsequenceSetModulo, diffSetModulo, moduloValue"},
    {"Preceding Code": "public static double calculateBhattacharyyaCoefficient(double[] p, double[] q) { if (p.length != q.length) return Double.NaN; double sum = 0; for (int i = 0; i < p.length; i++) { sum += Math.sqrt(p[i] * q[i]); } return sum; } double[] pBhattacharyyaCoefficient = {0.4, 0.6}; double[] qBhattacharyyaCoefficient = {0.5, 0.5}; double bhattacharyyaCoefficientValue = calculateBhattacharyyaCoefficient(pBhattacharyyaCoefficient, qBhattacharyyaCoefficient);", "Arguments": "pBhattacharyyaCoefficient, qBhattacharyyaCoefficient"},
    {"Preceding Code": "public static boolean isCenteredHexagonalNumber(int num) { if (num <= 1) return num == 1; int n = 1; while (3 * n * (n + 1) + 1 <= num) { if (3 * n * (n + 1) + 1 == num) return true; n++; } return false; } int centeredHexagonalNumber = 19; boolean isCenteredHexagonalNumberValue = isCenteredHexagonalNumber(centeredHexagonalNumber);", "Arguments": "centeredHexagonalNumber"},
    {"Preceding Code": "public static double multiply(double a, double b) { return a * b; } double m = 2.5, n = 4.0; double product = multiply(m, n);", "Arguments": "m, n"},
    {"Preceding Code": "public static int add(int x, int y) { return x + y; } int a = 5, b = 10; int sum = add(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String concatenate(String str1, String str2) { return str1 + str2; } String first = \"Hello\", second = \"World\"; String result = concatenate(first, second);", "Arguments": "first, second"},
    {"Preceding Code": "public static boolean isEven(int num) { return num % 2 == 0; } int number = 7; boolean even = isEven(number);", "Arguments": "number"},
    {"Preceding Code": "public static double divide(double a, double b) { return a / b; } double x = 10.0, y = 2.0; double quotient = divide(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static int max(int a, int b) { return (a > b) ? a : b; } int val1 = 12, val2 = 8; int maximum = max(val1, val2);", "Arguments": "val1, val2"},
    {"Preceding Code": "public static boolean containsChar(String str, char c) { return str.indexOf(c) != -1; } String word = \"apple\"; char letter = 'p'; boolean found = containsChar(word, letter);", "Arguments": "word, letter"},
    {"Preceding Code": "public static int square(int num) { return num * num; } int value = 6; int squaredValue = square(value);", "Arguments": "value"},
    {"Preceding Code": "public static double areaOfCircle(double radius) { return Math.PI * radius * radius; } double r = 3.5; double area = areaOfCircle(r);", "Arguments": "r"},
    {"Preceding Code": "public static int countWords(String sentence) { return sentence.split(\" \").length; } String text = \"This is a test\"; int wordCount = countWords(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isPositive(int number) { return number > 0; } int num = -3; boolean positive = isPositive(num);", "Arguments": "num"},
    {"Preceding Code": "public static String reverseString(String str) { return new StringBuilder(str).reverse().toString(); } String input = \"hello\"; String reversed = reverseString(input);", "Arguments": "input"},
    {"Preceding Code": "public static double power(double base, double exponent) { return Math.pow(base, exponent); } double b = 2.0, e = 3.0; double result = power(b, e);", "Arguments": "b, e"},
    {"Preceding Code": "public static int factorial(int n) { return (n == 0) ? 1 : n * factorial(n - 1); } int num = 4; int fact = factorial(num);", "Arguments": "num"},
    {"Preceding Code": "public static boolean isPalindrome(String str) { String rev = new StringBuilder(str).reverse().toString(); return str.equals(rev); } String phrase = \"racecar\"; boolean palindrome = isPalindrome(phrase);", "Arguments": "phrase"},
    {"Preceding Code": "public static double hypotenuse(double a, double b) { return Math.sqrt(a * a + b * b); } double side1 = 3.0, side2 = 4.0; double hyp = hypotenuse(side1, side2);", "Arguments": "side1, side2"},
    {"Preceding Code": "public static int absoluteValue(int n) { return (n < 0) ? -n : n; } int val = -9; int absVal = absoluteValue(val);", "Arguments": "val"},
    {"Preceding Code": "public static boolean isVowel(char c) { return \"aeiouAEIOU\".indexOf(c) != -1; } char ch = 'e'; boolean vowel = isVowel(ch);", "Arguments": "ch"},
    {"Preceding Code": "public static String formatCurrency(double amount) { return String.format(\"$%.2f\", amount); } double price = 12.5; String formatted = formatCurrency(price);", "Arguments": "price"},
    {"Preceding Code": "public static int[] sortArray(int[] arr) { Arrays.sort(arr); return arr; } int[] numbers = {4, 2, 9, 1}; int[] sorted = sortArray(numbers);", "Arguments": "numbers"},
    {"Preceding Code": "public static double calculateJensenShannonDistance(double[] p, double[] q) { if (p.length != q.length) return Double.NaN; double[] m = new double[p.length]; for (int i = 0; i < p.length; i++) { m[i] = (p[i] + q[i]) / 2; } double js = 0; js += calculateKullbackLeiblerDivergence(p, m); js += calculateKullbackLeiblerDivergence(q, m); return Math.sqrt(js / 2); } double[] pJensenShannon = {0.4, 0.6}; double[] qJensenShannon = {0.5, 0.5}; double jensenShannonValue = calculateJensenShannonDistance(pJensenShannon, qJensenShannon);", "Arguments": "pJensenShannon, qJensenShannon"},
    {"Preceding Code": "public static boolean isCenteredPentagonalNumber(int num) { if (num <= 1) return num == 1; int n = 1; while ((5 * n * (n + 1) / 2) + 1 <= num) { if ((5 * n * (n + 1) / 2) + 1 == num) return true; n++; } return false; } int centeredPentagonalNumber = 31; boolean isCenteredPentagonalNumberValue = isCenteredPentagonalNumber(centeredPentagonalNumber);", "Arguments": "centeredPentagonalNumber"},
    {"Preceding Code": "public static String findLongestPalindromicSubstringWithKChanges(String str, int k) { int n = str.length(); int[][] dp = new int[n][n]; for (int i = 0; i < n; i++) { dp[i][i] = 1; } int maxLength = 1, start = 0; for (int len = 2; len <= n; len++) { for (int i = 0; i <= n - len; i++) { int j = i + len - 1; if (str.charAt(i) == str.charAt(j)) { dp[i][j] = dp[i + 1][j - 1] + 2; } else { if (k > 0) { dp[i][j] = Math.max(dp[i + 1][j], dp[i][j - 1]); k--; } } if (dp[i][j] > maxLength) { maxLength = dp[i][j]; start = i; } } } return str.substring(start, start + maxLength); } String palindromeKChanges = \"abccba\"; int kChanges = 1; String longestPalindromeKChanges = findLongestPalindromicSubstringWithKChanges(palindromeKChanges, kChanges);", "Arguments": "palindromeKChanges, kChanges"},
    {"Preceding Code": "public static double calculateCosineSimilarity(double[] p, double[] q) { if (p.length != q.length) return Double.NaN; double dotProduct = 0, normP = 0, normQ = 0; for (int i = 0; i < p.length; i++) { dotProduct += p[i] * q[i]; normP += p[i] * p[i]; normQ += q[i] * q[i]; } return dotProduct / (Math.sqrt(normP) * Math.sqrt(normQ)); } double[] pCosineSimilarity = {0.4, 0.6}; double[] qCosineSimilarity = {0.5, 0.5}; double cosineSimilarityValue = calculateCosineSimilarity(pCosineSimilarity, qCosineSimilarity);", "Arguments": "pCosineSimilarity, qCosineSimilarity"},
    {"Preceding Code": "public static boolean isCenteredSquareNumber(int num) { if (num <= 1) return num == 1; int n = 1; while ((2 * n * (n + 1) / 2) + 1 <= num) { if ((2 * n * (n + 1) / 2) + 1 == num) return true; n++; } return false; } int centeredSquareNumber = 25; boolean isCenteredSquareNumberValue = isCenteredSquareNumber(centeredSquareNumber);", "Arguments": "centeredSquareNumber"},
    {"Preceding Code": "public static double multiply(double a, double b) { return a * b; } double m = 2.5, n = 4.0; double product = multiply(m, n);", "Arguments": "m, n"},
    {"Preceding Code": "public static int add(int x, int y) { return x + y; } int a = 5, b = 10; int sum = add(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String concatenate(String str1, String str2) { return str1 + str2; } String first = \"Hello\", second = \"World\"; String result = concatenate(first, second);", "Arguments": "first, second"},
    {"Preceding Code": "public static boolean isEven(int num) { return num % 2 == 0; } int number = 7; boolean even = isEven(number);", "Arguments": "number"},
    {"Preceding Code": "public static double divide(double a, double b) { return a / b; } double x = 10.0, y = 2.0; double quotient = divide(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static int max(int a, int b) { return (a > b) ? a : b; } int val1 = 12, val2 = 8; int maximum = max(val1, val2);", "Arguments": "val1, val2"},
    {"Preceding Code": "public static boolean containsChar(String str, char c) { return str.indexOf(c) != -1; } String word = \"apple\"; char letter = 'p'; boolean found = containsChar(word, letter);", "Arguments": "word, letter"},
    {"Preceding Code": "public static int square(int num) { return num * num; } int value = 6; int squaredValue = square(value);", "Arguments": "value"},
    {"Preceding Code": "public static double areaOfCircle(double radius) { return Math.PI * radius * radius; } double r = 3.5; double area = areaOfCircle(r);", "Arguments": "r"},
    {"Preceding Code": "public static int countWords(String sentence) { return sentence.split(\" \").length; } String text = \"This is a test\"; int wordCount = countWords(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isPositive(int number) { return number > 0; } int num = -3; boolean positive = isPositive(num);", "Arguments": "num"},
    {"Preceding Code": "public static String reverseString(String str) { return new StringBuilder(str).reverse().toString(); } String input = \"hello\"; String reversed = reverseString(input);", "Arguments": "input"},
    {"Preceding Code": "public static double power(double base, double exponent) { return Math.pow(base, exponent); } double b = 2.0, e = 3.0; double result = power(b, e);", "Arguments": "b, e"},
    {"Preceding Code": "public static int factorial(int n) { return (n == 0) ? 1 : n * factorial(n - 1); } int num = 4; int fact = factorial(num);", "Arguments": "num"},
    {"Preceding Code": "public static boolean isPalindrome(String str) { String rev = new StringBuilder(str).reverse().toString(); return str.equals(rev); } String phrase = \"racecar\"; boolean palindrome = isPalindrome(phrase);", "Arguments": "phrase"},
    {"Preceding Code": "public static double hypotenuse(double a, double b) { return Math.sqrt(a * a + b * b); } double side1 = 3.0, side2 = 4.0; double hyp = hypotenuse(side1, side2);", "Arguments": "side1, side2"},
    {"Preceding Code": "public static int absoluteValue(int n) { return (n < 0) ? -n : n; } int val = -9; int absVal = absoluteValue(val);", "Arguments": "val"},
    {"Preceding Code": "public static boolean isVowel(char c) { return \"aeiouAEIOU\".indexOf(c) != -1; } char ch = 'e'; boolean vowel = isVowel(ch);", "Arguments": "ch"},
    {"Preceding Code": "public static String formatCurrency(double amount) { return String.format(\"$%.2f\", amount); } double price = 12.5; String formatted = formatCurrency(price);", "Arguments": "price"},
    {"Preceding Code": "public static int[] sortArray(int[] arr) { Arrays.sort(arr); return arr; } int[] numbers = {4, 2, 9, 1}; int[] sorted = sortArray(numbers);", "Arguments": "numbers"},
    {"Preceding Code": "public static double calculateDiceCoefficient(String str1, String str2) { java.util.Set<String> bigrams1 = new java.util.HashSet<>(); java.util.Set<String> bigrams2 = new java.util.HashSet<>(); for (int i = 0; i < str1.length() - 1; i++) { bigrams1.add(str1.substring(i, i + 2)); } for (int i = 0; i < str2.length() - 1; i++) { bigrams2.add(str2.substring(i, i + 2)); } java.util.Set<String> intersection = new java.util.HashSet<>(bigrams1); intersection.retainAll(bigrams2); return (2.0 * intersection.size()) / (bigrams1.size() + bigrams2.size()); } String diceStr1 = \"night\"; String diceStr2 = \"nacht\"; double diceCoefficientValue = calculateDiceCoefficient(diceStr1, diceStr2);", "Arguments": "diceStr1, diceStr2"},
    {"Preceding Code": "public static boolean isSmithNumberWithBase(int num, int base) { if (num <= 1) return false; int sumDigits = sumOfDigitsBase(num, base); int sumPrimeFactors = 0; int temp = num; for (int i = 2; i <= temp; i++) { while (temp % i == 0) { sumPrimeFactors += sumOfDigitsBase(i, base); temp /= i; } } return sumDigits == sumPrimeFactors; } public static int sumOfDigitsBase(int num, int base) { int sum = 0; while (num > 0) { sum += num % base; num /= base; } return sum; } int smithNumberBase = 22; int numberBase = 10; boolean isSmithBase = isSmithNumberWithBase(smithNumberBase, numberBase);", "Arguments": "smithNumberBase, numberBase"},
    {"Preceding Code": "public static String findLongestCommonSubstringWithMismatches(String str1, String str2, int m) { int n = str1.length(), m2 = str2.length(); intdp = new int[n + 1][m2 + 1]; int maxLength = 0, endIndex = 0; for (int i = 1; i <= n; i++) { for (int j = 1; j <= m2; j++) { int mismatches = 0; int p = i - 1, q = j - 1; while (p >= 0 && q >= 0 && (str1.charAt(p) == str2.charAt(q) || mismatches < m)) { if (str1.charAt(p) != str2.charAt(q)) { mismatches++; } dp[i][j] = dp[i - 1][j - 1] + 1; if (dp[i][j] > maxLength) { maxLength = dp[i][j]; endIndex = i; } p--; q--; } } } return str1.substring(endIndex - maxLength, endIndex); } String stringMismatch1 = \"abcdefg\"; String stringMismatch2 = \"abceefg\"; int maxMismatches = 1; String longestMismatch = findLongestCommonSubstringWithMismatches(stringMismatch1, stringMismatch2, maxMismatches);", "Arguments": "stringMismatch1, stringMismatch2, maxMismatches"},
    {"Preceding Code": "public static double calculateSorensenDiceCoefficient(String str1, String str2) { java.util.Set<String> bigrams1 = new java.util.HashSet<>(); java.util.Set<String> bigrams2 = new java.util.HashSet<>(); for (int i = 0; i < str1.length() - 1; i++) { bigrams1.add(str1.substring(i, i + 2)); } for (int i = 0; i < str2.length() - 1; i++) { bigrams2.add(str2.substring(i, i + 2)); } java.util.Set<String> intersection = new java.util.HashSet<>(bigrams1); intersection.retainAll(bigrams2); int unionSize = bigrams1.size() + bigrams2.size() - intersection.size(); return (double) intersection.size() / unionSize; } String sorensenStr1 = \"night\"; String sorensenStr2 = \"nacht\"; double sorensenDiceCoefficientValue = calculateSorensenDiceCoefficient(sorensenStr1, sorensenStr2);", "Arguments": "sorensenStr1, sorensenStr2"},
    {"Preceding Code": "public static boolean isSmithNumberWithBaseAndModulo(int num, int base, int modulo) { if (num <= 1) return false; int sumDigits = sumOfDigitsBase(num, base) % modulo; int sumPrimeFactors = 0; int temp = num; for (int i = 2; i <= temp; i++) { while (temp % i == 0) { sumPrimeFactors += sumOfDigitsBase(i, base) % modulo; temp /= i; } } return sumDigits == sumPrimeFactors; } public static int sumOfDigitsBase(int num, int base) { int sum = 0; while (num > 0) { sum += num % base; num /= base; } return sum; } int smithNumberBaseModulo = 22; int numberBaseModulo = 10; int moduloValueSmith = 5; boolean isSmithBaseModulo = isSmithNumberWithBaseAndModulo(smithNumberBaseModulo, numberBaseModulo, moduloValueSmith);", "Arguments": "smithNumberBaseModulo, numberBaseModulo, moduloValueSmith"},
    {"Preceding Code": "public static double calculateLevenshteinRatio(String str1, String str2) { intdp = new int[str1.length() + 1][str2.length() + 1]; for (int i = 0; i <= str1.length(); i++) { dp[i][0] = i; } for (int j = 0; j <= str2.length(); j++) { dp[0][j] = j; } for (int i = 1; i <= str1.length(); i++) { for (int j = 1; j <= str2.length(); j++) { int cost = str1.charAt(i - 1) == str2.charAt(j - 1) ? 0 : 1; dp[i][j] = Math.min(Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1), dp[i - 1][j - 1] + cost); } } int maxLen = Math.max(str1.length(), str2.length()); return (double) (maxLen - dp[str1.length()][str2.length()]) / maxLen; } String levenshteinStr1 = \"kitten\"; String levenshteinStr2 = \"sitting\"; double levenshteinRatioValue = calculateLevenshteinRatio(levenshteinStr1, levenshteinStr2);", "Arguments": "levenshteinStr1, levenshteinStr2"},
    {"Preceding Code": "public static boolean isSmithNumberWithBaseAndModuloAndXOR(int num, int base, int modulo, int xor) { if (num <= 1) return false; int sumDigits = sumOfDigitsBase(num, base) % modulo; int sumPrimeFactors = 0; int temp = num; for (int i = 2; i <= temp; i++) { while (temp % i == 0) { sumPrimeFactors += sumOfDigitsBase(i, base) % modulo; temp /= i; } } return (sumDigits ^ sumPrimeFactors) == xor; } public static int sumOfDigitsBase(int num, int base) { int sum = 0; while (num > 0) { sum += num % base; num /= base; } return sum; } int smithNumberBaseModuloXOR = 22; int numberBaseModuloXOR = 10; int moduloValueSmithXOR = 5; int xorValueSmith = 3; boolean isSmithBaseModuloXOR = isSmithNumberWithBaseAndModuloAndXOR(smithNumberBaseModuloXOR, numberBaseModuloXOR, moduloValueSmithXOR, xorValueSmith);", "Arguments": "smithNumberBaseModuloXOR, numberBaseModuloXOR, moduloValueSmithXOR, xorValueSmith"},
    {"Preceding Code": "public static double multiply(double a, double b) { return a * b; } double m = 2.5, n = 4.0; double product = multiply(m, n);", "Arguments": "m, n"},
    {"Preceding Code": "public static int add(int x, int y) { return x + y; } int a = 5, b = 10; int sum = add(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String concatenate(String str1, String str2) { return str1 + str2; } String first = \"Hello\", second = \"World\"; String result = concatenate(first, second);", "Arguments": "first, second"},
    {"Preceding Code": "public static boolean isEven(int num) { return num % 2 == 0; } int number = 7; boolean even = isEven(number);", "Arguments": "number"},
    {"Preceding Code": "public static int subtract(int p, int q) { return p - q; } int x = 20, y = 8; int difference = subtract(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static double divide(double dividend, double divisor) { return dividend / divisor; } double num1 = 10.0, num2 = 2.0; double quotient = divide(num1, num2);", "Arguments": "num1, num2"},
    {"Preceding Code": "public static int max(int a, int b) { return a > b ? a : b; } int v1 = 12, v2 = 25; int maximum = max(v1, v2);", "Arguments": "v1, v2"},
    {"Preceding Code": "public static int factorial(int n) { return (n == 1) ? 1 : n * factorial(n - 1); } int num = 5; int fact = factorial(num);", "Arguments": "num"},
    {"Preceding Code": "public static boolean contains(String text, String substring) { return text.contains(substring); } String phrase = \"Java programming\", search = \"Java\"; boolean found = contains(phrase, search);", "Arguments": "phrase, search"},
    {"Preceding Code": "public static double power(double base, double exponent) { return Math.pow(base, exponent); } double base = 3.0, exp = 4.0; double result = power(base, exp);", "Arguments": "base, exp"},
     {"Preceding Code": "public static double multiply(double a, double b) { return a * b; } double m = 2.5, n = 4.0; double product = multiply(m, n);", "Arguments": "m, n"},
    {"Preceding Code": "public static int add(int x, int y) { return x + y; } int a = 5, b = 10; int sum = add(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String concatenate(String str1, String str2) { return str1 + str2; } String first = 'Hello', second = 'World'; String result = concatenate(first, second);", "Arguments": "first, second"},
    {"Preceding Code": "public static boolean isEven(int num) { return num % 2 == 0; } int number = 7; boolean even = isEven(number);", "Arguments": "number"},
    {"Preceding Code": "public static int subtract(int x, int y) { return x - y; } int p = 15, q = 7; int difference = subtract(p, q);", "Arguments": "p, q"},
    {"Preceding Code": "public static double divide(double a, double b) { return a / b; } double x = 20.0, y = 5.0; double quotient = divide(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static int modulo(int a, int b) { return a % b; } int dividend = 17, divisor = 5; int remainder = modulo(dividend, divisor);", "Arguments": "dividend, divisor"},
    {"Preceding Code": "public static boolean isGreaterThan(int a, int b) { return a > b; } int num1 = 10, num2 = 5; boolean greater = isGreaterThan(num1, num2);", "Arguments": "num1, num2"},
    {"Preceding Code": "public static String greet(String name) { return 'Hello, ' + name + '!'; } String userName = 'Alice'; String greeting = greet(userName);", "Arguments": "userName"},
    {"Preceding Code": "public static double calculateArea(double radius) { return 3.14159 * radius * radius; } double r = 5.0; double area = calculateArea(r);", "Arguments": "r"},
    {"Preceding Code": "public static boolean areEqual(int a, int b) { return a == b; } int val1 = 12, val2 = 12; boolean equal = areEqual(val1, val2);", "Arguments": "val1, val2"},
    {"Preceding Code": "public static char getFirstChar(String str) { return str.charAt(0); } String text = 'Example'; char firstChar = getFirstChar(text);", "Arguments": "text"},
    {"Preceding Code": "public static int square(int n) { return n * n; } int number = 9; int squared = square(number);", "Arguments": "number"},
    {"Preceding Code": "public static double average(double a, double b) { return (a + b) / 2.0; } double x = 7.0, y = 13.0; double avg = average(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static boolean isPositive(int num) { return num > 0; } int value = -5; boolean positive = isPositive(value);", "Arguments": "value"},
    {"Preceding Code": "public static String toUpperCase(String str) { return str.toUpperCase(); } String lower = 'lowercase'; String upper = toUpperCase(lower);", "Arguments": "lower"},
    {"Preceding Code": "public static int absoluteValue(int num) { return Math.abs(num); } int neg = -8; int absVal = absoluteValue(neg);", "Arguments": "neg"},
    {"Preceding Code": "public static boolean isLessThanOrEqualTo(double a, double b) { return a <= b; } double val1 = 4.5, val2 = 4.6; boolean lessOrEqual = isLessThanOrEqualTo(val1, val2);", "Arguments": "val1, val2"},
    {"Preceding Code": "public static String repeatString(String str, int times) { String result = ''; for(int i = 0; i < times; i++) { result += str; } return result; } String word = 'Hi'; int count = 3; String repeated = repeatString(word, count);", "Arguments": "word, count"},
    {"Preceding Code": "public static double power(double base, double exponent) { return Math.pow(base, exponent); } double b = 2.0, e = 3.0; double result = power(b, e);", "Arguments": "b, e"},
    {"Preceding Code": "public static int square(int num) { return num * num; } int value = 6; int squared = square(value);", "Arguments": "value"},
    {"Preceding Code": "public static double average(double a, double b, double c) { return (a + b + c) / 3; } double x = 4.0, y = 7.5, z = 2.5; double avg = average(x, y, z);", "Arguments": "x, y, z"},
    {"Preceding Code": "public static boolean isUpperCase(String str) { return str.equals(str.toUpperCase()); } String input = \"HELLO\"; boolean upper = isUpperCase(input);", "Arguments": "input"},
    {"Preceding Code": "public static int sumDigits(int num) { int sum = 0; while (num > 0) { sum += num % 10; num /= 10; } return sum; } int number = 123; int digitSum = sumDigits(number);", "Arguments": "number"},
    {"Preceding Code": "public static double celsiusToFahrenheit(double celsius) { return (celsius * 9/5) + 32; } double tempC = 25.0; double tempF = celsiusToFahrenheit(tempC);", "Arguments": "tempC"},
    {"Preceding Code": "public static int countWords(String text) { return text.split(\"\\s+\").length; } String sentence = \"Java is powerful\"; int wordCount = countWords(sentence);", "Arguments": "sentence"},
    {"Preceding Code": "public static char firstCharacter(String str) { return str.charAt(0); } String word = \"Java\"; char firstChar = firstCharacter(word);", "Arguments": "word"},
    {"Preceding Code": "public static int findIndex(int[] arr, int target) { for (int i = 0; i < arr.length; i++) { if (arr[i] == target) return i; } return -1; } int[] numbers = {10, 20, 30, 40}; int index = findIndex(numbers, 30);", "Arguments": "numbers, 30"},
    {"Preceding Code": "public static boolean isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0); } int y = 2024; boolean leap = isLeapYear(y);", "Arguments": "y"},
    {"Preceding Code": "public static double rectangleArea(double length, double width) { return length * width; } double l = 5.0, w = 10.0; double area = rectangleArea(l, w);", "Arguments": "l, w"}, 
    {"Preceding Code": "public static double multiply(double a, double b) { return a * b; } double m = 2.5, n = 4.0; double product = multiply(m, n);", "Arguments": "m, n"},
    {"Preceding Code": "public static int add(int x, int y) { return x + y; } int a = 5, b = 10; int sum = add(a, b);", "Arguments": "a, b"},
    {"Preceding Code": "public static String concatenate(String str1, String str2) { return str1 + str2; } String first = 'Hello', second = 'World'; String result = concatenate(first, second);", "Arguments": "first, second"},
    {"Preceding Code": "public static boolean isEven(int num) { return num % 2 == 0; } int number = 7; boolean even = isEven(number);", "Arguments": "number"},
    {"Preceding Code": "public static double divide(double a, double b) { return a / b; } double x = 10.0, y = 2.0; double quotient = divide(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static int subtract(int x, int y) { return x - y; } int c = 15, d = 5; int difference = subtract(c, d);", "Arguments": "c, d"},
    {"Preceding Code": "public static String reverse(String str) { return new StringBuilder(str).reverse().toString(); } String text = 'example'; String reversed = reverse(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isPrime(int num) { for (int i = 2; i <= Math.sqrt(num); i++) { if (num % i == 0) return false; } return true; } int num = 13; boolean prime = isPrime(num);", "Arguments": "num"},
    {"Preceding Code": "public static double power(double base, double exponent) { return Math.pow(base, exponent); } double b = 2.0, e = 3.0; double result = power(b, e);", "Arguments": "b, e"},
    {"Preceding Code": "public static int factorial(int n) { if (n == 0) return 1; return n * factorial(n - 1); } int num = 5; int fact = factorial(num);", "Arguments": "num"},
    {"Preceding Code": "public static String toUpperCase(String str) { return str.toUpperCase(); } String text = 'hello'; String upper = toUpperCase(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isPositive(int num) { return num > 0; } int value = 10; boolean positive = isPositive(value);", "Arguments": "value"},
    {"Preceding Code": "public static double squareRoot(double num) { return Math.sqrt(num); } double value = 16.0; double sqrt = squareRoot(value);", "Arguments": "value"},
    {"Preceding Code": "public static int max(int a, int b) { return Math.max(a, b); } int x = 7, y = 12; int maximum = max(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static String repeat(String str, int times) { return str.repeat(times); } String word = 'hi'; String repeated = repeat(word, 3);", "Arguments": "word, 3"},
    {"Preceding Code": "public static boolean isPalindrome(String str) { return str.equals(new StringBuilder(str).reverse().toString()); } String text = 'racecar'; boolean palindrome = isPalindrome(text);", "Arguments": "text"},
    {"Preceding Code": "public static double areaOfCircle(double radius) { return Math.PI * radius * radius; } double r = 5.0; double area = areaOfCircle(r);", "Arguments": "r"},
    {"Preceding Code": "public static int countVowels(String str) { int count = 0; for (char c : str.toCharArray()) { if ('aeiou'.contains(String.valueOf(c))) count++; } return count; } String text = 'hello'; int vowels = countVowels(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isLeapYear(int year) { return (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0); } int y = 2020; boolean leap = isLeapYear(y);", "Arguments": "y"},
    {"Preceding Code": "public static double celsiusToFahrenheit(double celsius) { return (celsius * 9/5) + 32; } double temp = 25.0; double fahrenheit = celsiusToFahrenheit(temp);", "Arguments": "temp"},
    {"Preceding Code": "public static int sumArray(int[] arr) { int sum = 0; for (int num : arr) sum += num; return sum; } int[] numbers = {1, 2, 3, 4, 5}; int total = sumArray(numbers);", "Arguments": "numbers"},
    {"Preceding Code": "public static String removeWhitespace(String str) { return str.replaceAll('\\s', ''); } String text = 'Hello World'; String noSpace = removeWhitespace(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean containsDigit(String str) { return str.matches('.*\\d.*'); } String input = 'abc123'; boolean hasDigit = containsDigit(input);", "Arguments": "input"},
    {"Preceding Code": "public static double average(double[] arr) { double sum = 0; for (double num : arr) sum += num; return sum / arr.length; } double[] values = {1.0, 2.0, 3.0, 4.0}; double avg = average(values);", "Arguments": "values"},
    {"Preceding Code": "public static int findMin(int[] arr) { int min = arr[0]; for (int num : arr) if (num < min) min = num; return min; } int[] nums = {5, 3, 8, 1}; int min = findMin(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static String capitalize(String str) { return str.substring(0, 1).toUpperCase() + str.substring(1); } String word = 'hello'; String capitalized = capitalize(word);", "Arguments": "word"},
    {"Preceding Code": "public static boolean isNullOrEmpty(String str) { return str == null || str.isEmpty(); } String text = ''; boolean empty = isNullOrEmpty(text);", "Arguments": "text"},
    {"Preceding Code": "public static double circumferenceOfCircle(double radius) { return 2 * Math.PI * radius; } double r = 3.0; double circumference = circumferenceOfCircle(r);", "Arguments": "r"},
    {"Preceding Code": "public static int countWords(String str) { return str.split('\\s+').length; } String sentence = 'This is a test'; int wordCount = countWords(sentence);", "Arguments": "sentence"},
    {"Preceding Code": "public static boolean isAnagram(String str1, String str2) { char[] arr1 = str1.toCharArray(); char[] arr2 = str2.toCharArray(); Arrays.sort(arr1); Arrays.sort(arr2); return Arrays.equals(arr1, arr2); } String s1 = 'listen', s2 = 'silent'; boolean anagram = isAnagram(s1, s2);", "Arguments": "s1, s2"},
    {"Preceding Code": "public static double fahrenheitToCelsius(double fahrenheit) { return (fahrenheit - 32) * 5/9; } double temp = 77.0; double celsius = fahrenheitToCelsius(temp);", "Arguments": "temp"},
    {"Preceding Code": "public static int gcd(int a, int b) { while (b != 0) { int temp = b; b = a % b; a = temp; } return a; } int x = 12, y = 18; int gcdResult = gcd(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static String reverseWords(String str) { String[] words = str.split('\\s+'); StringBuilder reversed = new StringBuilder(); for (int i = words.length - 1; i >= 0; i--) reversed.append(words[i]).append(' '); return reversed.toString().trim(); } String sentence = 'This is a test'; String reversedSentence = reverseWords(sentence);", "Arguments": "sentence"},
    {"Preceding Code": "public static boolean isPerfectSquare(int num) { int sqrt = (int) Math.sqrt(num); return sqrt * sqrt == num; } int n = 16; boolean perfectSquare = isPerfectSquare(n);", "Arguments": "n"},
    {"Preceding Code": "public static double logBase10(double num) { return Math.log10(num); } double value = 100.0; double log = logBase10(value);", "Arguments": "value"},
    {"Preceding Code": "public static int countOccurrences(String str, char ch) { int count = 0; for (char c : str.toCharArray()) if (c == ch) count++; return count; } String text = 'hello'; char target = 'l'; int occurrences = countOccurrences(text, target);", "Arguments": "text, target"},
    {"Preceding Code": "public static boolean isArmstrongNumber(int num) { int sum = 0, temp = num; while (temp != 0) { int digit = temp % 10; sum += digit * digit * digit; temp /= 10; } return sum == num; } int n = 153; boolean armstrong = isArmstrongNumber(n);", "Arguments": "n"},
    {"Preceding Code": "public static String replaceVowels(String str, char replacement) { return str.replaceAll('[aeiou]', String.valueOf(replacement)); } String text = 'hello'; char rep = '*'; String replaced = replaceVowels(text, rep);", "Arguments": "text, rep"},
    {"Preceding Code": "public static double hypotenuse(double a, double b) { return Math.sqrt(a * a + b * b); } double side1 = 3.0, side2 = 4.0; double hypo = hypotenuse(side1, side2);", "Arguments": "side1, side2"},
    {"Preceding Code": "public static int fibonacci(int n) { if (n <= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); } int num = 6; int fib = fibonacci(num);", "Arguments": "num"},
    {"Preceding Code": "public static String removeDuplicates(String str) { StringBuilder result = new StringBuilder(); for (char c : str.toCharArray()) if (result.indexOf(String.valueOf(c)) == -1) result.append(c); return result.toString(); } String text = 'hello'; String unique = removeDuplicates(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isSorted(int[] arr) { for (int i = 1; i < arr.length; i++) if (arr[i] < arr[i - 1]) return false; return true; } int[] nums = {1, 2, 3, 4}; boolean sorted = isSorted(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static double median(double[] arr) { Arrays.sort(arr); int mid = arr.length / 2; return arr.length % 2 == 0 ? (arr[mid] + arr[mid - 1]) / 2 : arr[mid]; } double[] values = {1.0, 2.0, 3.0, 4.0}; double med = median(values);", "Arguments": "values"},
    {"Preceding Code": "public static String padLeft(String str, int length, char padChar) { return String.format('%' + length + 's', str).replace(' ', padChar); } String text = 'hello'; String padded = padLeft(text, 10, '*');", "Arguments": "text, 10, '*'"},
    {"Preceding Code": "public static boolean isPowerOfTwo(int num) { return num > 0 && (num & (num - 1)) == 0; } int n = 8; boolean powerOfTwo = isPowerOfTwo(n);", "Arguments": "n"},
    {"Preceding Code": "public static String toLowerCase(String str) { return str.toLowerCase(); } String text = 'HELLO'; String lower = toLowerCase(text);", "Arguments": "text"},
    {"Preceding Code": "public static int lcm(int a, int b) { return a * (b / gcd(a, b)); } int x = 12, y = 18; int lcmResult = lcm(x, y);", "Arguments": "x, y"},
    {"Preceding Code": "public static boolean isVowel(char ch) { return 'aeiou'.indexOf(Character.toLowerCase(ch)) != -1; } char c = 'a'; boolean vowel = isVowel(c);", "Arguments": "c"},
    {"Preceding Code": "public static String trim(String str) { return str.trim(); } String text = '  hello  '; String trimmed = trim(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] normalize(double[] arr) { double sum = Arrays.stream(arr).sum(); return Arrays.stream(arr).map(d -> d / sum).toArray(); } double[] values = {1.0, 2.0, 3.0}; double[] normalized = normalize(values);", "Arguments": "values"},
    {"Preceding Code": "public static boolean isPerfectNumber(int num) { int sum = 0; for (int i = 1; i < num; i++) if (num % i == 0) sum += i; return sum == num; } int n = 28; boolean perfect = isPerfectNumber(n);", "Arguments": "n"},
    {"Preceding Code": "public static String reverseCase(String str) { StringBuilder result = new StringBuilder(); for (char c : str.toCharArray()) { if (Character.isUpperCase(c)) result.append(Character.toLowerCase(c)); else result.append(Character.toUpperCase(c)); } return result.toString(); } String text = 'Hello World'; String reversedCase = reverseCase(text);", "Arguments": "text"},
    {"Preceding Code": "public static int countDigits(int num) { return String.valueOf(num).length(); } int n = 12345; int digitCount = countDigits(n);", "Arguments": "n"},
    {"Preceding Code": "public static boolean isHex(String str) { return str.matches('^[0-9A-Fa-f]+$'); } String hex = '1A3F'; boolean isHex = isHex(hex);", "Arguments": "hex"},
    {"Preceding Code": "public static String removePunctuation(String str) { return str.replaceAll('[^a-zA-Z0-9\\s]', ''); } String text = 'Hello, World!'; String cleaned = removePunctuation(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] squareArray(double[] arr) { return Arrays.stream(arr).map(d -> d * d).toArray(); } double[] values = {1.0, 2.0, 3.0}; double[] squared = squareArray(values);", "Arguments": "values"},
    {"Preceding Code": "public static boolean isBinary(String str) { return str.matches('^[01]+$'); } String binary = '101010'; boolean isBinary = isBinary(binary);", "Arguments": "binary"},
    {"Preceding Code": "public static String repeatChar(char ch, int times) { return String.valueOf(ch).repeat(times); } char c = '*'; int count = 5; String repeated = repeatChar(c, count);", "Arguments": "c, count"},
    {"Preceding Code": "public static boolean isDivisible(int num, int divisor) { return num % divisor == 0; } int n = 10, d = 2; boolean divisible = isDivisible(n, d);", "Arguments": "n, d"},
    {"Preceding Code": "public static String removeChar(String str, char ch) { return str.replace(String.valueOf(ch), ''); } String text = 'hello'; char target = 'l'; String removed = removeChar(text, target);", "Arguments": "text, target"},
    {"Preceding Code": "public static double[] cumulativeSum(double[] arr) { double sum = 0; return Arrays.stream(arr).map(d -> sum += d).toArray(); } double[] values = {1.0, 2.0, 3.0}; double[] cumulative = cumulativeSum(values);", "Arguments": "values"},
    {"Preceding Code": "public static boolean isPalindromeNumber(int num) { String str = String.valueOf(num); return str.equals(new StringBuilder(str).reverse().toString()); } int n = 121; boolean palindromeNumber = isPalindromeNumber(n);", "Arguments": "n"},
    {"Preceding Code": "public static String insertAt(String str, int index, char ch) { return str.substring(0, index) + ch + str.substring(index); } String text = 'hello'; int pos = 2; char insert = 'x'; String inserted = insertAt(text, pos, insert);", "Arguments": "text, pos, insert"},
    {"Preceding Code": "public static boolean isUppercase(String str) { return str.equals(str.toUpperCase()); } String text = 'HELLO'; boolean uppercase = isUppercase(text);", "Arguments": "text"},
    {"Preceding Code": "public static int countSpaces(String str) { return str.length() - str.replace(' ', '').length(); } String text = 'Hello World'; int spaces = countSpaces(text);", "Arguments": "text"},
    {"Preceding Code": "public static String replaceSpaces(String str, char replacement) { return str.replace(' ', replacement); } String text = 'Hello World'; char rep = '-'; String replaced = replaceSpaces(text, rep);", "Arguments": "text, rep"},
    {"Preceding Code": "public static double[] reverseArray(double[] arr) { double[] reversed = new double[arr.length]; for (int i = 0; i < arr.length; i++) reversed[arr.length - 1 - i] = arr[i]; return reversed; } double[] values = {1.0, 2.0, 3.0}; double[] reversed = reverseArray(values);", "Arguments": "values"},
    {"Preceding Code": "public static int countSubstring(String str, String sub) { return str.split(sub, -1).length - 1; } String text = 'hellohellohello'; String substring = 'hello'; int count = countSubstring(text, substring);", "Arguments": "text, substring"},
    {"Preceding Code": "public static boolean isLowercase(String str) { return str.equals(str.toLowerCase()); } String text = 'hello'; boolean lowercase = isLowercase(text);", "Arguments": "text"},
    {"Preceding Code": "public static String removeNumbers(String str) { return str.replaceAll('\\d', ''); } String text = 'abc123'; String noNumbers = removeNumbers(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] incrementArray(int[] arr) { return Arrays.stream(arr).map(num -> num + 1).toArray(); } int[] nums = {1, 2, 3}; int[] incremented = incrementArray(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isEvenLength(String str) { return str.length() % 2 == 0; } String text = 'hello'; boolean evenLength = isEvenLength(text);", "Arguments": "text"},
    {"Preceding Code": "public static String swapCase(String str) { StringBuilder result = new StringBuilder(); for (char c : str.toCharArray()) { if (Character.isUpperCase(c)) result.append(Character.toLowerCase(c)); else result.append(Character.toUpperCase(c)); } return result.toString(); } String text = 'Hello World'; String swapped = swapCase(text);", "Arguments": "text"},
    {"Preceding Code": "public static int countConsonants(String str) { return str.replaceAll('[aeiouAEIOU\\d\\s]', '').length(); } String text = 'hello world'; int consonants = countConsonants(text);", "Arguments": "text"},
    {"Preceding Code": "public static double[] multiplyArray(double[] arr, double factor) { return Arrays.stream(arr).map(d -> d * factor).toArray(); } double[] values = {1.0, 2.0, 3.0}; double factor = 2.0; double[] multiplied = multiplyArray(values, factor);", "Arguments": "values, factor"},
    {"Preceding Code": "public static boolean isAlphabetic(String str) { return str.chars().allMatch(Character::isLetter); } String text = 'abc'; boolean alphabetic = isAlphabetic(text);", "Arguments": "text"},
    {"Preceding Code": "public static String removeSpaces(String str) { return str.replaceAll('\\s', ''); } String text = 'hello world'; String noSpaces = removeSpaces(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterEvenNumbers(int[] arr) { return Arrays.stream(arr).filter(num -> num % 2 == 0).toArray(); } int[] nums = {1, 2, 3, 4, 5}; int[] evens = filterEvenNumbers(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static String replaceDigits(String str, char replacement) { return str.replaceAll('\\d', String.valueOf(replacement)); } String text = 'abc123'; char rep = '*'; String replaced = replaceDigits(text, rep);", "Arguments": "text, rep"},
    {"Preceding Code": "public static boolean isOdd(int num) { return num % 2 != 0; } int n = 7; boolean odd = isOdd(n);", "Arguments": "n"},
    {"Preceding Code": "public static String reverseString(String str) { return new StringBuilder(str).reverse().toString(); } String text = 'hello'; String reversed = reverseString(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] squareNumbers(int[] arr) { return Arrays.stream(arr).map(num -> num * num).toArray(); } int[] nums = {1, 2, 3}; int[] squared = squareNumbers(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isNegative(int num) { return num < 0; } int n = -5; boolean negative = isNegative(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeVowels(String str) { return str.replaceAll('[aeiouAEIOU]', ''); } String text = 'hello'; String noVowels = removeVowels(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterPositiveNumbers(int[] arr) { return Arrays.stream(arr).filter(num -> num > 0).toArray(); } int[] nums = {-1, 2, -3, 4}; int[] positives = filterPositiveNumbers(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static String padRight(String str, int length, char padChar) { return String.format('%-' + length + 's', str).replace(' ', padChar); } String text = 'hello'; String padded = padRight(text, 10, '*');", "Arguments": "text, 10, '*'"},
    {"Preceding Code": "public static boolean isDivisibleByThree(int num) { return num % 3 == 0; } int n = 9; boolean divisibleByThree = isDivisibleByThree(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeSpecialChars(String str) { return str.replaceAll('[^a-zA-Z0-9]', ''); } String text = 'hello@world!'; String cleaned = removeSpecialChars(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterOddNumbers(int[] arr) { return Arrays.stream(arr).filter(num -> num % 2 != 0).toArray(); } int[] nums = {1, 2, 3, 4, 5}; int[] odds = filterOddNumbers(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isPalindromeIgnoreCase(String str) { return str.equalsIgnoreCase(new StringBuilder(str).reverse().toString()); } String text = 'Racecar'; boolean palindromeIgnoreCase = isPalindromeIgnoreCase(text);", "Arguments": "text"},
    {"Preceding Code": "public static String replaceVowelsIgnoreCase(String str, char replacement) { return str.replaceAll('[aeiouAEIOU]', String.valueOf(replacement)); } String text = 'Hello World'; char rep = '*'; String replaced = replaceVowelsIgnoreCase(text, rep);", "Arguments": "text, rep"},
    {"Preceding Code": "public static int[] filterNegativeNumbers(int[] arr) { return Arrays.stream(arr).filter(num -> num < 0).toArray(); } int[] nums = {-1, 2, -3, 4}; int[] negatives = filterNegativeNumbers(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByFive(int num) { return num % 5 == 0; } int n = 10; boolean divisibleByFive = isDivisibleByFive(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeWhitespaceAndPunctuation(String str) { return str.replaceAll('[\\s\\p{Punct}]', ''); } String text = 'Hello, World!'; String cleaned = removeWhitespaceAndPunctuation(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterMultiplesOfTen(int[] arr) { return Arrays.stream(arr).filter(num -> num % 10 == 0).toArray(); } int[] nums = {10, 20, 25, 30}; int[] multiples = filterMultiplesOfTen(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleBySeven(int num) { return num % 7 == 0; } int n = 14; boolean divisibleBySeven = isDivisibleBySeven(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonAlphabetic(String str) { return str.replaceAll('[^a-zA-Z]', ''); } String text = 'Hello123World!'; String cleaned = removeNonAlphabetic(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterPrimes(int[] arr) { return Arrays.stream(arr).filter(num -> isPrime(num)).toArray(); } int[] nums = {2, 3, 4, 5, 6}; int[] primes = filterPrimes(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByEleven(int num) { return num % 11 == 0; } int n = 22; boolean divisibleByEleven = isDivisibleByEleven(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonDigits(String str) { return str.replaceAll('[^0-9]', ''); } String text = 'abc123def456'; String digitsOnly = removeNonDigits(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterEvenDigits(int[] arr) { return Arrays.stream(arr).filter(num -> num % 2 == 0).toArray(); } int[] nums = {12, 34, 56, 78}; int[] evenDigits = filterEvenDigits(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByThirteen(int num) { return num % 13 == 0; } int n = 26; boolean divisibleByThirteen = isDivisibleByThirteen(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonLetters(String str) { return str.replaceAll('[^a-zA-Z]', ''); } String text = 'Hello123World!'; String lettersOnly = removeNonLetters(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterOddDigits(int[] arr) { return Arrays.stream(arr).filter(num -> num % 2 != 0).toArray(); } int[] nums = {12, 34, 56, 78}; int[] oddDigits = filterOddDigits(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleBySeventeen(int num) { return num % 17 == 0; } int n = 34; boolean divisibleBySeventeen = isDivisibleBySeventeen(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonAlphanumeric(String str) { return str.replaceAll('[^a-zA-Z0-9]', ''); } String text = 'Hello123World!'; String alphanumeric = removeNonAlphanumeric(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterMultiplesOfFive(int[] arr) { return Arrays.stream(arr).filter(num -> num % 5 == 0).toArray(); } int[] nums = {5, 10, 15, 20}; int[] multiples = filterMultiplesOfFive(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByNineteen(int num) { return num % 19 == 0; } int n = 38; boolean divisibleByNineteen = isDivisibleByNineteen(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonWhitespace(String str) { return str.replaceAll('[^\\s]', ''); } String text = 'Hello World'; String whitespaceOnly = removeNonWhitespace(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterMultiplesOfThree(int[] arr) { return Arrays.stream(arr).filter(num -> num % 3 == 0).toArray(); } int[] nums = {3, 6, 9, 12}; int[] multiples = filterMultiplesOfThree(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByTwentyThree(int num) { return num % 23 == 0; } int n = 46; boolean divisibleByTwentyThree = isDivisibleByTwentyThree(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonPrintableChars(String str) { return str.replaceAll('[^\\x20-\\x7E]', ''); } String text = 'Hello\u0009World!'; String printable = removeNonPrintableChars(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterMultiplesOfSeven(int[] arr) { return Arrays.stream(arr).filter(num -> num % 7 == 0).toArray(); } int[] nums = {7, 14, 21, 28}; int[] multiples = filterMultiplesOfSeven(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByTwentyNine(int num) { return num % 29 == 0; } int n = 58; boolean divisibleByTwentyNine = isDivisibleByTwentyNine(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonAscii(String str) { return str.replaceAll('[^\\x00-\\x7F]', ''); } String text = 'Hello\u00A3World!'; String asciiOnly = removeNonAscii(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterMultiplesOfEleven(int[] arr) { return Arrays.stream(arr).filter(num -> num % 11 == 0).toArray(); } int[] nums = {11, 22, 33, 44}; int[] multiples = filterMultiplesOfEleven(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByThirtyOne(int num) { return num % 31 == 0; } int n = 62; boolean divisibleByThirtyOne = isDivisibleByThirtyOne(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonLettersAndDigits(String str) { return str.replaceAll('[^a-zA-Z0-9]', ''); } String text = 'Hello123World!'; String lettersAndDigits = removeNonLettersAndDigits(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterMultiplesOfThirteen(int[] arr) { return Arrays.stream(arr).filter(num -> num % 13 == 0).toArray(); } int[] nums = {13, 26, 39, 52}; int[] multiples = filterMultiplesOfThirteen(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByThirtySeven(int num) { return num % 37 == 0; } int n = 74; boolean divisibleByThirtySeven = isDivisibleByThirtySeven(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonLettersAndSpaces(String str) { return str.replaceAll('[^a-zA-Z\\s]', ''); } String text = 'Hello123 World!'; String lettersAndSpaces = removeNonLettersAndSpaces(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterMultiplesOfSeventeen(int[] arr) { return Arrays.stream(arr).filter(num -> num % 17 == 0).toArray(); } int[] nums = {17, 34, 51, 68}; int[] multiples = filterMultiplesOfSeventeen(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByFortyOne(int num) { return num % 41 == 0; } int n = 82; boolean divisibleByFortyOne = isDivisibleByFortyOne(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonLettersAndDigitsAndSpaces(String str) { return str.replaceAll('[^a-zA-Z0-9\\s]', ''); } String text = 'Hello123 World!'; String lettersDigitsSpaces = removeNonLettersAndDigitsAndSpaces(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterMultiplesOfNineteen(int[] arr) { return Arrays.stream(arr).filter(num -> num % 19 == 0).toArray(); } int[] nums = {19, 38, 57, 76}; int[] multiples = filterMultiplesOfNineteen(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByFortyThree(int num) { return num % 43 == 0; } int n = 86; boolean divisibleByFortyThree = isDivisibleByFortyThree(n);", "Arguments": "n"},
    {"Preceding Code": "public static String removeNonLettersAndDigitsAndPunctuation(String str) { return str.replaceAll('[^a-zA-Z0-9\\p{Punct}]', ''); } String text = 'Hello123, World!'; String lettersDigitsPunctuation = removeNonLettersAndDigitsAndPunctuation(text);", "Arguments": "text"},
    {"Preceding Code": "public static int[] filterMultiplesOfTwentyThree(int[] arr) { return Arrays.stream(arr).filter(num -> num % 23 == 0).toArray(); } int[] nums = {23, 46, 69, 92}; int[] multiples = filterMultiplesOfTwentyThree(nums);", "Arguments": "nums"},
    {"Preceding Code": "public static boolean isDivisibleByFortySeven(int num) { return num % 47 == 0; } int n = 94; boolean divisibleByFortySeven = isDivisibleByFortySeven(n);", "Arguments": "n"},
    {"Preceding Code": "public static double calculateHypotenuse(double a, double b) { return Math.sqrt(a * a + b * b); } double sideA = 3.0, sideB = 4.0; double hypotenuse = calculateHypotenuse(sideA, sideB);", "Arguments": "sideA, sideB"},
    {"Preceding Code": "public static int factorial(int n) { return n <= 1 ? 1 : n * factorial(n - 1); } int num = 5; int fact = factorial(num);", "Arguments": "num"},
    {"Preceding Code": "public static String reverseString(String str) { return new StringBuilder(str).reverse().toString(); } String text = 'Hello'; String reversed = reverseString(text);", "Arguments": "text"},
    {"Preceding Code": "public static boolean isPrime(int num) { if (num <= 1) return false; for (int i = 2; i <= Math.sqrt(num); i++) if (num % i == 0) return false; return true; } int number = 11; boolean prime = isPrime(number);","Arguments": "number"},
    {"Preceding Code": "public static double calculateArea(double radius) { return Math.PI * radius * radius; } double r = 5.0; double area = calculateArea(r);", "Arguments": "r"},
    {"Preceding Code": "public static int[] bubbleSort(int[] arr) { int n = arr.length; for (int i = 0; i < n - 1; i++) for (int j = 0; j < n - 1 - i; j++) if (arr[j] > arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } return arr; } int[] array = {64, 34, 25, 12, 22, 11, 90}; int[] sortedArray = bubbleSort(array);", "Arguments": "array"},
    {"Preceding Code": "public static String[] splitString(String str, String delimiter) { return str.split(delimiter); } String sentence = 'Hello,World'; String[] words = splitString(sentence, ',');", "Arguments": "sentence, ','"},
    {"Preceding Code": "public static int findMax(int[] arr) { int max = arr[0]; for (int i = 1; i < arr.length; i++) if (arr[i] > max) max = arr[i]; return max; } int[] numbers = {1, 3, 5, 7, 9}; int max = findMax(numbers);","Arguments": "numbers"},
    {"Preceding Code": "public static int findMin(int[] arr) { int min = arr[0]; for (int i = 1; i < arr.length; i++) if (arr[i] < min) min = arr[i]; return min; } int[] values = {10, 20, 30, 40, 50}; int min = findMin(values);","Arguments": "values"},
    {"Preceding Code": "public static boolean isPalindrome(String str) { int left = 0, right = str.length() - 1; while (left < right) if (str.charAt(left++) != str.charAt(right--)) return false; return true; } String word = 'racecar'; boolean palindrome = isPalindrome(word);","Arguments": "word"},
    {"Preceding Code": "public static int[] mergeArrays(int[] arr1, int[] arr2) { int[] result = new int[arr1.length + arr2.length]; System.arraycopy(arr1, 0, result, 0, arr1.length); System.arraycopy(arr2, 0, result, arr1.length, arr2.length); return result; } int[] array1 = {1, 2, 3}; int[] array2 = {4, 5, 6}; int[] mergedArray = mergeArrays(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static double calculateCircumference(double radius) { return 2 * Math.PI * radius; } double r = 7.0; double circumference = calculateCircumference(r);", "Arguments": "r"},
    {"Preceding Code": "public static int[] quickSort(int[] arr) { if (arr.length <= 1) return arr; int pivot = arr[arr.length / 2]; int[] left = java.util.Arrays.stream(arr).filter(x -> x < pivot).toArray(); int[] middle = java.util.Arrays.stream(arr).filter(x -> x == pivot).toArray(); int[] right = java.util.Arrays.stream(arr).filter(x -> x > pivot).toArray(); return concatenate(quickSort(left), middle, quickSort(right)); } int[] array = {3, 6, 8, 10, 1, 2, 1}; int[] sortedArray = quickSort(array);", "Arguments": "array"},
    {"Preceding Code": "public static int[] concatenate(int[]... arrays) { int totalLength = 0; for (int[] array : arrays) totalLength += array.length; int[] result = new int[totalLength]; int offset = 0; for (int[] array : arrays) System.arraycopy(array, 0, result, offset, array.length); offset += array.length; return result; } int[] array1 = {1, 2, 3}; int[] array2 = {4, 5, 6}; int[] array3 = {7, 8, 9}; int[] concatenatedArray = concatenate(array1, array2, array3);", "Arguments": "array1, array2, array3"},
    {"Preceding Code": "public static boolean contains(int[] arr, int value) { for (int i : arr) if (i == value) return true; return false; } int[] numbers = {1, 2, 3, 4, 5}; int value = 3; boolean containsValue = contains(numbers, value);", "Arguments": "numbers, value"},
    {"Preceding Code": "public static int countOccurrences(int[] arr, int value) { int count = 0; for (int i : arr) if (i == value) count++; return count; } int[] array = {1, 2, 2, 3, 4, 2}; int value = 2; int occurrences = countOccurrences(array, value);", "Arguments": "array, value"},
    {"Preceding Code": "public static int[] removeDuplicates(int[] arr) { java.util.Set<Integer> set = new java.util.HashSet<>(); for (int i : arr) set.add(i); return set.stream().mapToInt(Number::intValue).toArray(); } int[] array = {1, 2, 2, 3, 4, 4, 5}; int[] uniqueArray = removeDuplicates(array);", "Arguments": "array"},
    {"Preceding Code": "public static int[] rotateArray(int[] arr, int k) { int n = arr.length; k = k % n; int[] result = new int[n]; System.arraycopy(arr, n - k, result, 0, k); System.arraycopy(arr, 0, result, k, n - k); return result; } int[] array = {1, 2, 3, 4, 5}; int k = 2; int[] rotatedArray = rotateArray(array, k);", "Arguments": "array, k"},
    {"Preceding Code": "public static int[] reverseArray(int[] arr) { int[] result = new int[arr.length]; for (int i = 0; i < arr.length; i++) result[i] = arr[arr.length - 1 - i]; return result; } int[] array = {1, 2, 3, 4, 5}; int[] reversedArray = reverseArray(array);", "Arguments": "array"},
    {"Preceding Code": "public static int[] insertElement(int[] arr, int value, int index) { int[] result = new int[arr.length + 1]; System.arraycopy(arr, 0, result, 0, index); result[index] = value; System.arraycopy(arr, index, result, index + 1, arr.length - index); return result; } int[] array = {1, 2, 3, 4}; int value = 5; int index = 2; int[] newArray = insertElement(array, value, index);", "Arguments": "array, value, index"},
    {"Preceding Code": "public static int[] deleteElement(int[] arr, int index) { int[] result = new int[arr.length - 1]; System.arraycopy(arr, 0, result, 0, index); System.arraycopy(arr, index + 1, result, index, arr.length - index - 1); return result; } int[] array = {1, 2, 3, 4, 5}; int index = 2; int[] newArray = deleteElement(array, index);", "Arguments": "array, index"},
    {"Preceding Code": "public static int[] shuffleArray(int[] arr) { java.util.Random rand = new java.util.Random(); for (int i = arr.length - 1; i > 0; i--) { int j = rand.nextInt(i + 1); int temp = arr[i]; arr[i] = arr[j]; arr[j] = temp; } return arr; } int[] array = {1, 2, 3, 4, 5}; int[] shuffledArray = shuffleArray(array);", "Arguments": "array"},
    {"Preceding Code": "public static int[] sortArrayDescending(int[] arr) { int n = arr.length; for (int i = 0; i < n - 1; i++) for (int j = 0; j < n - 1 - i; j++) if (arr[j] < arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } return arr; } int[] array = {5, 2, 9, 1, 5, 6}; int[] sortedArray = sortArrayDescending(array);", "Arguments": "array"},
    {"Preceding Code": "public static int[] sortArrayAscending(int[] arr) { int n = arr.length; for (int i = 0; i < n - 1; i++) for (int j = 0; j < n - 1 - i; j++) if (arr[j] > arr[j + 1]) { int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } return arr; } int[] array = {5, 2, 9, 1, 5, 6}; int[] sortedArray = sortArrayAscending(array);", "Arguments": "array"},
    {"Preceding Code": "public static int[] findCommonElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); set1.retainAll(set2); return set1.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3, 4}; int[] array2 = {3, 4, 5, 6}; int[] commonElements = findCommonElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findDifferenceElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); set1.removeAll(set2); return set1.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3, 4}; int[] array2 = {3, 4, 5, 6}; int[] differenceElements = findDifferenceElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findUnionElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); set1.addAll(set2); return set1.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3, 4}; int[] array2 = {3, 4, 5, 6}; int[] unionElements = findUnionElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findIntersectionElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); set1.retainAll(set2); return set1.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3, 4}; int[] array2 = {3, 4, 5, 6}; int[] intersectionElements = findIntersectionElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findSymmetricDifferenceElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); java.util.Set<Integer> symmetricDifference = new java.util.HashSet<>(set1); symmetricDifference.removeAll(set2); symmetricDifference.addAll(set2); symmetricDifference.removeAll(set1); return symmetricDifference.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3, 4}; int[] array2 = {3, 4, 5, 6}; int[] symmetricDifferenceElements = findSymmetricDifferenceElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findUniqueElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); set1.removeAll(set2); set2.removeAll(set1); set1.addAll(set2); return set1.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3, 4}; int[] array2 = {3, 4, 5, 6}; int[] uniqueElements = findUniqueElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findComplementElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); set1.removeAll(set2); return set1.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3, 4}; int[] array2 = {3, 4, 5, 6}; int[] complementElements = findComplementElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findSubsetElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); set1.retainAll(set2); return set1.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3}; int[] array2 = {1, 2, 3, 4, 5}; int[] subsetElements = findSubsetElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findSupersetElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); set1.addAll(set2); return set1.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3, 4, 5}; int[] array2 = {1, 2, 3}; int[] supersetElements = findSupersetElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findDisjointElements(int[] arr1, int[] arr2) { java.util.Set<Integer> set1 = new java.util.HashSet<>(); java.util.Set<Integer> set2 = new java.util.HashSet<>(); for (int i : arr1) set1.add(i); for (int i : arr2) set2.add(i); set1.removeAll(set2); set2.removeAll(set1); set1.addAll(set2); return set1.stream().mapToInt(Number::intValue).toArray(); } int[] array1 = {1, 2, 3}; int[] array2 = {4, 5, 6}; int[] disjointElements = findDisjointElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findPowerSetElements(int[] arr) { java.util.Set<java.util.Set<Integer>> powerSet = new java.util.HashSet<>(); powerSet.add(new java.util.HashSet<>()); for (int num : arr) { java.util.Set<java.util.Set<Integer>> newSets = new java.util.HashSet<>(); for (java.util.Set<Integer> subset : powerSet) { java.util.Set<Integer> newSubset = new java.util.HashSet<>(subset); newSubset.add(num); newSets.add(newSubset); } powerSet.addAll(newSets); } return powerSet.stream().flatMapToInt(set -> set.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3}; int[] powerSetElements = findPowerSetElements(array);", "Arguments": "array"},
    {"Preceding Code": "public static int[] findCartesianProductElements(int[] arr1, int[] arr2) { java.util.List<int[]> cartesianProduct = new java.util.ArrayList<>(); for (int i : arr1) for (int j : arr2) cartesianProduct.add(new int[]{i, j}); return cartesianProduct.stream().flatMapToInt(java.util.Arrays::stream).toArray(); } int[] array1 = {1, 2}; int[] array2 = {3, 4}; int[] cartesianProductElements = findCartesianProductElements(array1, array2);", "Arguments": "array1, array2"},
    {"Preceding Code": "public static int[] findSumPairs(int[] arr, int target) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) if (set.contains(target - i)) pairs.add(java.util.Arrays.asList(i, target - i)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int target = 7; int[] sumPairs = findSumPairs(array, target);", "Arguments": "array, target"},
    {"Preceding Code": "public static int[] findProductPairs(int[] arr, int target) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) if (set.contains(target / i)) pairs.add(java.util.Arrays.asList(i, target / i)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int target = 10; int[] productPairs = findProductPairs(array, target);", "Arguments": "array, target"},
    {"Preceding Code": "public static int[] findDifferencePairs(int[] arr, int target) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) if (set.contains(i - target)) pairs.add(java.util.Arrays.asList(i, i - target)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int target = 2; int[] differencePairs = findDifferencePairs(array, target);", "Arguments": "array, target"},
    {"Preceding Code": "public static int[] findQuotientPairs(int[] arr, int target) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) if (set.contains(i / target)) pairs.add(java.util.Arrays.asList(i, i / target)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int target = 2; int[] quotientPairs = findQuotientPairs(array, target);", "Arguments": "array, target"},
    {"Preceding Code": "public static int[] findPairsWithSum(int[] arr, int target) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) if (set.contains(target - i)) pairs.add(java.util.Arrays.asList(i, target - i)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int target = 7; int[] pairsWithSum = findPairsWithSum(array, target);", "Arguments": "array, target"},
    {"Preceding Code": "public static int[] findPairsWithProduct(int[] arr, int target) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) if (set.contains(target / i)) pairs.add(java.util.Arrays.asList(i, target / i)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int target = 10; int[] pairsWithProduct = findPairsWithProduct(array, target);", "Arguments": "array, target"},
    {"Preceding Code": "public static int[] findPairsWithDifference(int[] arr, int target) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) if (set.contains(i - target)) pairs.add(java.util.Arrays.asList(i, i - target)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int target = 2; int[] pairsWithDifference = findPairsWithDifference(array, target);", "Arguments": "array, target"},
    {"Preceding Code": "public static int[] findPairsWithQuotient(int[] arr, int target) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) if (set.contains(i / target)) pairs.add(java.util.Arrays.asList(i, i / target)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int target = 2; int[] pairsWithQuotient = findPairsWithQuotient(array, target);", "Arguments": "array, target"},
    {"Preceding Code": "public static int[] findPairsWithSumAndProduct(int[] arr, int targetSum, int targetProduct) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int[] pairsWithSumAndProduct = findPairsWithSumAndProduct(array, targetSum, targetProduct);", "Arguments": "array, targetSum, targetProduct"},
    {"Preceding Code": "public static int[] findPairsWithSumAndDifference(int[] arr, int targetSum, int targetDifference) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && Math.abs(i - j) == targetDifference) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetDifference = 2; int[] pairsWithSumAndDifference = findPairsWithSumAndDifference(array, targetSum, targetDifference);", "Arguments": "array, targetSum, targetDifference"},
    {"Preceding Code": "public static int[] findPairsWithSumAndQuotient(int[] arr, int targetSum, int targetQuotient) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i / j == targetQuotient) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetQuotient = 2; int[] pairsWithSumAndQuotient = findPairsWithSumAndQuotient(array, targetSum, targetQuotient);", "Arguments": "array, targetSum, targetQuotient"},
    {"Preceding Code": "public static int[] findPairsWithProductAndDifference(int[] arr, int targetProduct, int targetDifference) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i * j == targetProduct && Math.abs(i - j) == targetDifference) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetProduct = 10; int targetDifference = 2; int[] pairsWithProductAndDifference = findPairsWithProductAndDifference(array, targetProduct, targetDifference);", "Arguments": "array, targetProduct, targetDifference"},
    {"Preceding Code": "public static int[] findPairsWithProductAndQuotient(int[] arr, int targetProduct, int targetQuotient) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i * j == targetProduct && i / j == targetQuotient) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetProduct = 10; int targetQuotient = 2; int[] pairsWithProductAndQuotient = findPairsWithProductAndQuotient(array, targetProduct, targetQuotient);", "Arguments": "array, targetProduct, targetQuotient"},
    {"Preceding Code": "public static int[] findPairsWithDifferenceAndQuotient(int[] arr, int targetDifference, int targetQuotient) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (Math.abs(i - j) == targetDifference && i / j == targetQuotient) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetDifference = 2; int targetQuotient = 2; int[] pairsWithDifferenceAndQuotient = findPairsWithDifferenceAndQuotient(array, targetDifference, targetQuotient);", "Arguments": "array, targetDifference, targetQuotient"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifference(int[] arr, int targetSum, int targetProduct, int targetDifference) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int[] pairsWithSumProductDifference = findPairsWithSumProductDifference(array, targetSum, targetProduct, targetDifference);", "Arguments": "array, targetSum, targetProduct, targetDifference"},
    {"Preceding Code": "public static int[] findPairsWithSumProductQuotient(int[] arr, int targetSum, int targetProduct, int targetQuotient) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && i / j == targetQuotient) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetQuotient = 2; int[] pairsWithSumProductQuotient = findPairsWithSumProductQuotient(array, targetSum, targetProduct, targetQuotient);", "Arguments": "array, targetSum, targetProduct, targetQuotient"},
    {"Preceding Code": "public static int[] findPairsWithSumDifferenceQuotient(int[] arr, int targetSum, int targetDifference, int targetQuotient) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && Math.abs(i - j) == targetDifference && i / j == targetQuotient) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetDifference = 2; int targetQuotient = 2; int[] pairsWithSumDifferenceQuotient = findPairsWithSumDifferenceQuotient(array, targetSum, targetDifference, targetQuotient);", "Arguments": "array, targetSum, targetDifference, targetQuotient"},
    {"Preceding Code": "public static int[] findPairsWithProductDifferenceQuotient(int[] arr, int targetProduct, int targetDifference, int targetQuotient) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int[] pairsWithProductDifferenceQuotient = findPairsWithProductDifferenceQuotient(array, targetProduct, targetDifference, targetQuotient);", "Arguments": "array, targetProduct, targetDifference, targetQuotient"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotient(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int[] pairsWithSumProductDifferenceQuotient = findPairsWithSumProductDifferenceQuotient(array, targetSum, targetProduct, targetDifference, targetQuotient);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndMore(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetMore) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j == targetMore) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetMore = 17; int[] pairsWithSumProductDifferenceQuotientAndMore = findPairsWithSumProductDifferenceQuotientAndMore(array, targetSum, targetProduct, targetDifference, targetQuotient, targetMore);", "Arguments": "array, targetSum, Product, targetDifference, targetQuotient, targetMore"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndLess(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetLess) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j < targetLess) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetLess = 17; int[] pairsWithSumProductDifferenceQuotientAndLess = findPairsWithSumProductDifferenceQuotientAndLess(array, targetSum, targetProduct, targetDifference, targetQuotient, targetLess);","Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetLess"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndEqual(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetEqual) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j == targetEqual) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetEqual = 17; int[] pairsWithSumProductDifferenceQuotientAndEqual = findPairsWithSumProductDifferenceQuotientAndEqual(array, targetSum, targetProduct, targetDifference, targetQuotient, targetEqual);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetEqual"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndNotEqual(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetNotEqual) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j != targetNotEqual) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetNotEqual = 17; int[] pairsWithSumProductDifferenceQuotientAndNotEqual = findPairsWithSumProductDifferenceQuotientAndNotEqual(array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotEqual);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotEqual"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndGreater(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetGreater) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j > targetGreater) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetGreater = 17; int[] pairsWithSumProductDifferenceQuotientAndGreater = findPairsWithSumProductDifferenceQuotientAndGreater(array, targetSum, targetProduct, targetDifference, targetQuotient, targetGreater);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetGreater"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndLessOrEqual(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetLessOrEqual) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j <= targetLessOrEqual) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetLessOrEqual = 17; int[] pairsWithSumProductDifferenceQuotientAndLessOrEqual = findPairsWithSumProductDifferenceQuotientAndLessOrEqual(array, targetSum, targetProduct, targetDifference, targetQuotient, targetLessOrEqual);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetLessOrEqual"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndGreaterOrEqual(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetGreaterOrEqual) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j >= targetGreaterOrEqual) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetGreaterOrEqual = 17; int[] pairsWithSumProductDifferenceQuotientAndGreaterOrEqual = findPairsWithSumProductDifferenceQuotientAndGreaterOrEqual(array, targetSum, targetProduct, targetDifference, targetQuotient, targetGreaterOrEqual);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetGreaterOrEqual"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndNotGreater(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetNotGreater) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j <= targetNotGreater) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetNotGreater = 17; int[] pairsWithSumProductDifferenceQuotientAndNotGreater = findPairsWithSumProductDifferenceQuotientAndNotGreater(array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotGreater);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotGreater"
    },
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndNotLess(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetNotLess) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j >= targetNotLess) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetNotLess = 17; int[] pairsWithSumProductDifferenceQuotientAndNotLess = findPairsWithSumProductDifferenceQuotientAndNotLess(array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotLess);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotLess"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndNotEqualOrGreater(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetNotEqualOrGreater) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j < targetNotEqualOrGreater) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetNotEqualOrGreater = 17; int[] pairsWithSumProductDifferenceQuotientAndNotEqualOrGreater = findPairsWithSumProductDifferenceQuotientAndNotEqualOrGreater(array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotEqualOrGreater);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotEqualOrGreater"},
    {"Preceding Code": "public static int[] findPairsWithSumProductDifferenceQuotientAndNotEqualOrLess(int[] arr, int targetSum, int targetProduct, int targetDifference, int targetQuotient, int targetNotEqualOrLess) { java.util.Set<Integer> set = new java.util.HashSet<>(); java.util.Set<java.util.List<Integer>> pairs = new java.util.HashSet<>(); for (int i : arr) for (int j : arr) if (i + j == targetSum && i * j == targetProduct && Math.abs(i - j) == targetDifference && i / j == targetQuotient && i + j + i * j > targetNotEqualOrLess) pairs.add(java.util.Arrays.asList(i, j)); set.add(i); return pairs.stream().flatMapToInt(list -> list.stream().mapToInt(Number::intValue)).toArray(); } int[] array = {1, 2, 3, 4, 5}; int targetSum = 7; int targetProduct = 10; int targetDifference = 2; int targetQuotient = 2; int targetNotEqualOrLess = 17; int[] pairsWithSumProductDifferenceQuotientAndNotEqualOrLess = findPairsWithSumProductDifferenceQuotientAndNotEqualOrLess(array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotEqualOrLess);", "Arguments": "array, targetSum, targetProduct, targetDifference, targetQuotient, targetNotEqualOrLess"}
]